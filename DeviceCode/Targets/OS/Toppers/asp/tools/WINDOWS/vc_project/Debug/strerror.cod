; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	E:\netmf-interpreter3\DeviceCode\Targets\OS\Toppers\asp\library\strerror.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG2815	DB	'E_OK', 00H
	ORG $+3
$SG2817	DB	'E_SYS', 00H
	ORG $+2
$SG2819	DB	'E_NOSPT', 00H
$SG2821	DB	'E_RSFN', 00H
	ORG $+1
$SG2823	DB	'E_RSATR', 00H
$SG2825	DB	'E_PAR', 00H
	ORG $+2
$SG2827	DB	'E_ID', 00H
	ORG $+3
$SG2829	DB	'E_CTX', 00H
	ORG $+2
$SG2831	DB	'E_MACV', 00H
	ORG $+1
$SG2833	DB	'E_OACV', 00H
	ORG $+1
$SG2835	DB	'E_ILUSE', 00H
$SG2837	DB	'E_NOMEM', 00H
$SG2839	DB	'E_NOID', 00H
	ORG $+1
$SG2841	DB	'E_NORES', 00H
$SG2843	DB	'E_OBJ', 00H
	ORG $+2
$SG2845	DB	'E_NOEXS', 00H
$SG2847	DB	'E_QOVR', 00H
	ORG $+1
$SG2849	DB	'E_RLWAI', 00H
$SG2851	DB	'E_TMOUT', 00H
$SG2853	DB	'E_DLT', 00H
	ORG $+2
$SG2855	DB	'E_CLS', 00H
	ORG $+2
$SG2857	DB	'E_WBLK', 00H
	ORG $+1
$SG2859	DB	'E_BOVR', 00H
	ORG $+1
$SG2861	DB	'unknown error', 00H
_DATA	ENDS
PUBLIC	_itron_strerror
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\netmf-interpreter3\devicecode\targets\os\toppers\asp\library\strerror.c
_TEXT	SEGMENT
tv65 = -4						; size = 4
_ercd$ = 8						; size = 4
_itron_strerror PROC

; 37   :  *  の責任を負わない．

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 38   :  * 

  0000b	0f be 45 08	 movsx	 eax, BYTE PTR _ercd$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR tv65[ebp]
  00015	83 c1 3a	 add	 ecx, 58			; 0000003aH
  00018	89 4d fc	 mov	 DWORD PTR tv65[ebp], ecx
  0001b	83 7d fc 3a	 cmp	 DWORD PTR tv65[ebp], 58	; 0000003aH
  0001f	0f 87 c1 00 00
	00		 ja	 $LN1@itron_stre
  00025	8b 55 fc	 mov	 edx, DWORD PTR tv65[ebp]
  00028	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN29@itron_stre[edx]
  0002f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN30@itron_stre[eax*4]
$LN24@itron_stre:

; 39   :  *  @(#) $Id: strerror.c 2728 2015-12-30 01:46:11Z ertl-honda $
; 40   :  */

  00036	b8 00 00 00 00	 mov	 eax, OFFSET $SG2815
  0003b	e9 ab 00 00 00	 jmp	 $LN27@itron_stre
$LN23@itron_stre:

; 41   : 
; 42   : /*
; 43   :  *		エラーメッセージ文字列を返す関数

  00040	b8 00 00 00 00	 mov	 eax, OFFSET $SG2817
  00045	e9 a1 00 00 00	 jmp	 $LN27@itron_stre
$LN22@itron_stre:

; 44   :  */
; 45   : 

  0004a	b8 00 00 00 00	 mov	 eax, OFFSET $SG2819
  0004f	e9 97 00 00 00	 jmp	 $LN27@itron_stre
$LN21@itron_stre:

; 46   : #include <t_stddef.h>
; 47   : #include <t_stdlib.h>

  00054	b8 00 00 00 00	 mov	 eax, OFFSET $SG2821
  00059	e9 8d 00 00 00	 jmp	 $LN27@itron_stre
$LN20@itron_stre:

; 48   : 
; 49   : const char *

  0005e	b8 00 00 00 00	 mov	 eax, OFFSET $SG2823
  00063	e9 83 00 00 00	 jmp	 $LN27@itron_stre
$LN19@itron_stre:

; 50   : itron_strerror(ER ercd)
; 51   : {
; 52   : 	switch (MERCD(ercd)) {

  00068	b8 00 00 00 00	 mov	 eax, OFFSET $SG2825
  0006d	eb 7c		 jmp	 SHORT $LN27@itron_stre
$LN18@itron_stre:

; 53   : 	case E_OK:
; 54   : 		return("E_OK");

  0006f	b8 00 00 00 00	 mov	 eax, OFFSET $SG2827
  00074	eb 75		 jmp	 SHORT $LN27@itron_stre
$LN17@itron_stre:

; 55   : 
; 56   : 	case E_SYS:
; 57   : 		return("E_SYS");

  00076	b8 00 00 00 00	 mov	 eax, OFFSET $SG2829
  0007b	eb 6e		 jmp	 SHORT $LN27@itron_stre
$LN16@itron_stre:

; 58   : 	case E_NOSPT:
; 59   : 		return("E_NOSPT");

  0007d	b8 00 00 00 00	 mov	 eax, OFFSET $SG2831
  00082	eb 67		 jmp	 SHORT $LN27@itron_stre
$LN15@itron_stre:

; 60   : 	case E_RSFN:
; 61   : 		return("E_RSFN");

  00084	b8 00 00 00 00	 mov	 eax, OFFSET $SG2833
  00089	eb 60		 jmp	 SHORT $LN27@itron_stre
$LN14@itron_stre:

; 62   : 	case E_RSATR:
; 63   : 		return("E_RSATR");

  0008b	b8 00 00 00 00	 mov	 eax, OFFSET $SG2835
  00090	eb 59		 jmp	 SHORT $LN27@itron_stre
$LN13@itron_stre:

; 64   : 
; 65   : 	case E_PAR:
; 66   : 		return("E_PAR");

  00092	b8 00 00 00 00	 mov	 eax, OFFSET $SG2837
  00097	eb 52		 jmp	 SHORT $LN27@itron_stre
$LN12@itron_stre:

; 67   : 	case E_ID:
; 68   : 		return("E_ID");

  00099	b8 00 00 00 00	 mov	 eax, OFFSET $SG2839
  0009e	eb 4b		 jmp	 SHORT $LN27@itron_stre
$LN11@itron_stre:

; 69   : 
; 70   : 	case E_CTX:

  000a0	b8 00 00 00 00	 mov	 eax, OFFSET $SG2841
  000a5	eb 44		 jmp	 SHORT $LN27@itron_stre
$LN10@itron_stre:

; 71   : 		return("E_CTX");
; 72   : 	case E_MACV:
; 73   : 		return("E_MACV");

  000a7	b8 00 00 00 00	 mov	 eax, OFFSET $SG2843
  000ac	eb 3d		 jmp	 SHORT $LN27@itron_stre
$LN9@itron_stre:

; 74   : 	case E_OACV:
; 75   : 		return("E_OACV");

  000ae	b8 00 00 00 00	 mov	 eax, OFFSET $SG2845
  000b3	eb 36		 jmp	 SHORT $LN27@itron_stre
$LN8@itron_stre:

; 76   : 	case E_ILUSE:
; 77   : 		return("E_ILUSE");

  000b5	b8 00 00 00 00	 mov	 eax, OFFSET $SG2847
  000ba	eb 2f		 jmp	 SHORT $LN27@itron_stre
$LN7@itron_stre:

; 78   : 
; 79   : 	case E_NOMEM:
; 80   : 		return("E_NOMEM");

  000bc	b8 00 00 00 00	 mov	 eax, OFFSET $SG2849
  000c1	eb 28		 jmp	 SHORT $LN27@itron_stre
$LN6@itron_stre:

; 81   : 	case E_NOID:
; 82   : 		return("E_NOID");

  000c3	b8 00 00 00 00	 mov	 eax, OFFSET $SG2851
  000c8	eb 21		 jmp	 SHORT $LN27@itron_stre
$LN5@itron_stre:

; 83   : 	case E_NORES:
; 84   : 		return("E_NORES");

  000ca	b8 00 00 00 00	 mov	 eax, OFFSET $SG2853
  000cf	eb 1a		 jmp	 SHORT $LN27@itron_stre
$LN4@itron_stre:

; 85   : 
; 86   : 	case E_OBJ:

  000d1	b8 00 00 00 00	 mov	 eax, OFFSET $SG2855
  000d6	eb 13		 jmp	 SHORT $LN27@itron_stre
$LN3@itron_stre:

; 87   : 		return("E_OBJ");
; 88   : 	case E_NOEXS:
; 89   : 		return("E_NOEXS");

  000d8	b8 00 00 00 00	 mov	 eax, OFFSET $SG2857
  000dd	eb 0c		 jmp	 SHORT $LN27@itron_stre
$LN2@itron_stre:

; 90   : 	case E_QOVR:
; 91   : 		return("E_QOVR");

  000df	b8 00 00 00 00	 mov	 eax, OFFSET $SG2859
  000e4	eb 05		 jmp	 SHORT $LN27@itron_stre
$LN1@itron_stre:

; 92   : 
; 93   : 	case E_RLWAI:
; 94   : 		return("E_RLWAI");

  000e6	b8 00 00 00 00	 mov	 eax, OFFSET $SG2861
$LN27@itron_stre:

; 95   : 	case E_TMOUT:
; 96   : 		return("E_TMOUT");

  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
  000ef	90		 npad	 1
$LN30@itron_stre:
  000f0	00 00 00 00	 DD	 $LN2@itron_stre
  000f4	00 00 00 00	 DD	 $LN3@itron_stre
  000f8	00 00 00 00	 DD	 $LN4@itron_stre
  000fc	00 00 00 00	 DD	 $LN5@itron_stre
  00100	00 00 00 00	 DD	 $LN6@itron_stre
  00104	00 00 00 00	 DD	 $LN7@itron_stre
  00108	00 00 00 00	 DD	 $LN8@itron_stre
  0010c	00 00 00 00	 DD	 $LN9@itron_stre
  00110	00 00 00 00	 DD	 $LN10@itron_stre
  00114	00 00 00 00	 DD	 $LN11@itron_stre
  00118	00 00 00 00	 DD	 $LN12@itron_stre
  0011c	00 00 00 00	 DD	 $LN13@itron_stre
  00120	00 00 00 00	 DD	 $LN14@itron_stre
  00124	00 00 00 00	 DD	 $LN15@itron_stre
  00128	00 00 00 00	 DD	 $LN16@itron_stre
  0012c	00 00 00 00	 DD	 $LN17@itron_stre
  00130	00 00 00 00	 DD	 $LN18@itron_stre
  00134	00 00 00 00	 DD	 $LN19@itron_stre
  00138	00 00 00 00	 DD	 $LN20@itron_stre
  0013c	00 00 00 00	 DD	 $LN21@itron_stre
  00140	00 00 00 00	 DD	 $LN22@itron_stre
  00144	00 00 00 00	 DD	 $LN23@itron_stre
  00148	00 00 00 00	 DD	 $LN24@itron_stre
  0014c	00 00 00 00	 DD	 $LN1@itron_stre
$LN29@itron_stre:
  00150	00		 DB	 0
  00151	01		 DB	 1
  00152	17		 DB	 23			; 00000017H
  00153	17		 DB	 23			; 00000017H
  00154	17		 DB	 23			; 00000017H
  00155	17		 DB	 23			; 00000017H
  00156	02		 DB	 2
  00157	03		 DB	 3
  00158	04		 DB	 4
  00159	05		 DB	 5
  0015a	17		 DB	 23			; 00000017H
  0015b	17		 DB	 23			; 00000017H
  0015c	17		 DB	 23			; 00000017H
  0015d	17		 DB	 23			; 00000017H
  0015e	17		 DB	 23			; 00000017H
  0015f	06		 DB	 6
  00160	07		 DB	 7
  00161	08		 DB	 8
  00162	17		 DB	 23			; 00000017H
  00163	17		 DB	 23			; 00000017H
  00164	17		 DB	 23			; 00000017H
  00165	17		 DB	 23			; 00000017H
  00166	17		 DB	 23			; 00000017H
  00167	09		 DB	 9
  00168	0a		 DB	 10			; 0000000aH
  00169	0b		 DB	 11			; 0000000bH
  0016a	17		 DB	 23			; 00000017H
  0016b	17		 DB	 23			; 00000017H
  0016c	17		 DB	 23			; 00000017H
  0016d	17		 DB	 23			; 00000017H
  0016e	0c		 DB	 12			; 0000000cH
  0016f	0d		 DB	 13			; 0000000dH
  00170	0e		 DB	 14			; 0000000eH
  00171	0f		 DB	 15			; 0000000fH
  00172	17		 DB	 23			; 00000017H
  00173	17		 DB	 23			; 00000017H
  00174	17		 DB	 23			; 00000017H
  00175	17		 DB	 23			; 00000017H
  00176	17		 DB	 23			; 00000017H
  00177	17		 DB	 23			; 00000017H
  00178	10		 DB	 16			; 00000010H
  00179	11		 DB	 17			; 00000011H
  0017a	17		 DB	 23			; 00000017H
  0017b	17		 DB	 23			; 00000017H
  0017c	17		 DB	 23			; 00000017H
  0017d	17		 DB	 23			; 00000017H
  0017e	17		 DB	 23			; 00000017H
  0017f	12		 DB	 18			; 00000012H
  00180	13		 DB	 19			; 00000013H
  00181	14		 DB	 20			; 00000014H
  00182	17		 DB	 23			; 00000017H
  00183	17		 DB	 23			; 00000017H
  00184	17		 DB	 23			; 00000017H
  00185	15		 DB	 21			; 00000015H
  00186	17		 DB	 23			; 00000017H
  00187	17		 DB	 23			; 00000017H
  00188	17		 DB	 23			; 00000017H
  00189	17		 DB	 23			; 00000017H
  0018a	16		 DB	 22			; 00000016H
_itron_strerror ENDP
_TEXT	ENDS
END
