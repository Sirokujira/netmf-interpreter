; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	E:\netmf-interpreter3\DeviceCode\Targets\OS\Toppers\asp\library\vasyslog.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_syslog
EXTRN	_syslog_wri_log:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\netmf-interpreter3\devicecode\targets\os\toppers\asp\library\vasyslog.c
_TEXT	SEGMENT
tv136 = -80						; size = 4
tv95 = -76						; size = 4
tv86 = -72						; size = 4
tv71 = -68						; size = 4
tv70 = -64						; size = 4
_lflag$ = -60						; size = 4
_c$ = -53						; size = 1
_i$ = -52						; size = 4
_ap$ = -48						; size = 4
_logbuf$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_prio$ = 8						; size = 4
_format$ = 12						; size = 4
_syslog	PROC

; 40   :  */

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	57		 push	 edi
  00007	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0000a	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 41   : 
; 42   : /*
; 43   :  *		可変数引数のシステムログライブラリ
; 44   :  */
; 45   : 
; 46   : #include <t_stddef.h>
; 47   : #include <t_syslog.h>

  00020	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _logbuf$[ebp], 1

; 48   : #include <stdarg.h>

  00027	b8 04 00 00 00	 mov	 eax, 4
  0002c	6b c8 00	 imul	 ecx, eax, 0
  0002f	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  00032	89 54 0d e0	 mov	 DWORD PTR _logbuf$[ebp+ecx+8], edx

; 49   : 

  00036	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1

; 50   : #ifndef TOPPERS_OMIT_SYSLOG

  0003d	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  00040	89 45 d0	 mov	 DWORD PTR _ap$[ebp], eax
$LN15@syslog:

; 51   : 
; 52   : void

  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  00046	8a 11		 mov	 dl, BYTE PTR [ecx]
  00048	88 55 cb	 mov	 BYTE PTR _c$[ebp], dl
  0004b	0f be 45 cb	 movsx	 eax, BYTE PTR _c$[ebp]
  0004f	89 45 c0	 mov	 DWORD PTR tv70[ebp], eax
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  00055	83 c1 01	 add	 ecx, 1
  00058	89 4d 0c	 mov	 DWORD PTR _format$[ebp], ecx
  0005b	83 7d c0 00	 cmp	 DWORD PTR tv70[ebp], 0
  0005f	74 09		 je	 SHORT $LN18@syslog
  00061	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  00068	eb 07		 jmp	 SHORT $LN19@syslog
$LN18@syslog:
  0006a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN19@syslog:
  00071	83 7d bc 00	 cmp	 DWORD PTR tv71[ebp], 0
  00075	0f 84 8b 01 00
	00		 je	 $LN14@syslog
  0007b	83 7d cc 06	 cmp	 DWORD PTR _i$[ebp], 6
  0007f	0f 83 81 01 00
	00		 jae	 $LN14@syslog

; 53   : syslog(uint_t prio, const char *format, ...)

  00085	0f be 55 cb	 movsx	 edx, BYTE PTR _c$[ebp]
  00089	83 fa 25	 cmp	 edx, 37			; 00000025H
  0008c	74 02		 je	 SHORT $LN13@syslog

; 54   : {

  0008e	eb b3		 jmp	 SHORT $LN15@syslog
$LN13@syslog:

; 55   : 	SYSLOG	logbuf;
; 56   : 	va_list	ap;
; 57   : 	uint_t	i;

  00090	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _lflag$[ebp], 0

; 58   : 	char	c;

  00097	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  0009a	8a 08		 mov	 cl, BYTE PTR [eax]
  0009c	88 4d cb	 mov	 BYTE PTR _c$[ebp], cl
  0009f	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  000a2	83 c2 01	 add	 edx, 1
  000a5	89 55 0c	 mov	 DWORD PTR _format$[ebp], edx
$LN12@syslog:

; 59   : 	bool_t	lflag;

  000a8	0f be 45 cb	 movsx	 eax, BYTE PTR _c$[ebp]
  000ac	83 f8 30	 cmp	 eax, 48			; 00000030H
  000af	7c 1c		 jl	 SHORT $LN11@syslog
  000b1	0f be 4d cb	 movsx	 ecx, BYTE PTR _c$[ebp]
  000b5	83 f9 39	 cmp	 ecx, 57			; 00000039H
  000b8	7f 13		 jg	 SHORT $LN11@syslog

; 60   : 

  000ba	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  000bd	8a 02		 mov	 al, BYTE PTR [edx]
  000bf	88 45 cb	 mov	 BYTE PTR _c$[ebp], al
  000c2	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  000c5	83 c1 01	 add	 ecx, 1
  000c8	89 4d 0c	 mov	 DWORD PTR _format$[ebp], ecx

; 61   : 	logbuf.logtype = LOG_TYPE_COMMENT;

  000cb	eb db		 jmp	 SHORT $LN12@syslog
$LN11@syslog:

; 62   : 	logbuf.loginfo[0] = (intptr_t) format;

  000cd	0f be 55 cb	 movsx	 edx, BYTE PTR _c$[ebp]
  000d1	83 fa 6c	 cmp	 edx, 108		; 0000006cH
  000d4	75 18		 jne	 SHORT $LN10@syslog

; 63   : 	i = 1U;

  000d6	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _lflag$[ebp], 1

; 64   : 	va_start(ap, format);

  000dd	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  000e0	8a 08		 mov	 cl, BYTE PTR [eax]
  000e2	88 4d cb	 mov	 BYTE PTR _c$[ebp], cl
  000e5	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  000e8	83 c2 01	 add	 edx, 1
  000eb	89 55 0c	 mov	 DWORD PTR _format$[ebp], edx
$LN10@syslog:

; 65   : 
; 66   : 	while ((c = *format++) != '\0' && i < TMAX_LOGINFO) {

  000ee	0f be 45 cb	 movsx	 eax, BYTE PTR _c$[ebp]
  000f2	89 45 b8	 mov	 DWORD PTR tv86[ebp], eax
  000f5	83 7d b8 78	 cmp	 DWORD PTR tv86[ebp], 120 ; 00000078H
  000f9	0f 87 02 01 00
	00		 ja	 $LN8@syslog
  000ff	8b 4d b8	 mov	 ecx, DWORD PTR tv86[ebp]
  00102	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN25@syslog[ecx]
  00109	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN29@syslog[edx*4]
$LN7@syslog:

; 67   : 		if (c != '%') {
; 68   : 			continue;
; 69   : 		}

  00110	83 7d c4 00	 cmp	 DWORD PTR _lflag$[ebp], 0
  00114	74 14		 je	 SHORT $LN20@syslog
  00116	8b 45 d0	 mov	 eax, DWORD PTR _ap$[ebp]
  00119	83 c0 04	 add	 eax, 4
  0011c	89 45 d0	 mov	 DWORD PTR _ap$[ebp], eax
  0011f	8b 4d d0	 mov	 ecx, DWORD PTR _ap$[ebp]
  00122	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00125	89 55 b4	 mov	 DWORD PTR tv95[ebp], edx
  00128	eb 12		 jmp	 SHORT $LN21@syslog
$LN20@syslog:
  0012a	8b 45 d0	 mov	 eax, DWORD PTR _ap$[ebp]
  0012d	83 c0 04	 add	 eax, 4
  00130	89 45 d0	 mov	 DWORD PTR _ap$[ebp], eax
  00133	8b 4d d0	 mov	 ecx, DWORD PTR _ap$[ebp]
  00136	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00139	89 55 b4	 mov	 DWORD PTR tv95[ebp], edx
$LN21@syslog:
  0013c	8b 45 cc	 mov	 eax, DWORD PTR _i$[ebp]
  0013f	8b 4d b4	 mov	 ecx, DWORD PTR tv95[ebp]
  00142	89 4c 85 e0	 mov	 DWORD PTR _logbuf$[ebp+eax*4+8], ecx
  00146	8b 55 cc	 mov	 edx, DWORD PTR _i$[ebp]
  00149	83 c2 01	 add	 edx, 1
  0014c	89 55 cc	 mov	 DWORD PTR _i$[ebp], edx

; 70   : 

  0014f	e9 ad 00 00 00	 jmp	 $LN8@syslog
$LN6@syslog:

; 71   : 		lflag = false;
; 72   : 		c = *format++;
; 73   : 		while ('0' <= c && c <= '9') {
; 74   : 			c = *format++;
; 75   : 		}

  00154	83 7d c4 00	 cmp	 DWORD PTR _lflag$[ebp], 0
  00158	74 14		 je	 SHORT $LN22@syslog
  0015a	8b 45 d0	 mov	 eax, DWORD PTR _ap$[ebp]
  0015d	83 c0 04	 add	 eax, 4
  00160	89 45 d0	 mov	 DWORD PTR _ap$[ebp], eax
  00163	8b 4d d0	 mov	 ecx, DWORD PTR _ap$[ebp]
  00166	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00169	89 55 b0	 mov	 DWORD PTR tv136[ebp], edx
  0016c	eb 12		 jmp	 SHORT $LN23@syslog
$LN22@syslog:
  0016e	8b 45 d0	 mov	 eax, DWORD PTR _ap$[ebp]
  00171	83 c0 04	 add	 eax, 4
  00174	89 45 d0	 mov	 DWORD PTR _ap$[ebp], eax
  00177	8b 4d d0	 mov	 ecx, DWORD PTR _ap$[ebp]
  0017a	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0017d	89 55 b0	 mov	 DWORD PTR tv136[ebp], edx
$LN23@syslog:
  00180	8b 45 cc	 mov	 eax, DWORD PTR _i$[ebp]
  00183	8b 4d b0	 mov	 ecx, DWORD PTR tv136[ebp]
  00186	89 4c 85 e0	 mov	 DWORD PTR _logbuf$[ebp+eax*4+8], ecx
  0018a	8b 55 cc	 mov	 edx, DWORD PTR _i$[ebp]
  0018d	83 c2 01	 add	 edx, 1
  00190	89 55 cc	 mov	 DWORD PTR _i$[ebp], edx

; 76   : 		if (c == 'l') {

  00193	eb 6c		 jmp	 SHORT $LN8@syslog
$LN5@syslog:

; 77   : 			lflag = true;
; 78   : 			c = *format++;

  00195	8b 45 d0	 mov	 eax, DWORD PTR _ap$[ebp]
  00198	83 c0 04	 add	 eax, 4
  0019b	89 45 d0	 mov	 DWORD PTR _ap$[ebp], eax
  0019e	8b 4d cc	 mov	 ecx, DWORD PTR _i$[ebp]
  001a1	8b 55 d0	 mov	 edx, DWORD PTR _ap$[ebp]
  001a4	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  001a7	89 44 8d e0	 mov	 DWORD PTR _logbuf$[ebp+ecx*4+8], eax
  001ab	8b 4d cc	 mov	 ecx, DWORD PTR _i$[ebp]
  001ae	83 c1 01	 add	 ecx, 1
  001b1	89 4d cc	 mov	 DWORD PTR _i$[ebp], ecx

; 79   : 		}

  001b4	eb 4b		 jmp	 SHORT $LN8@syslog
$LN4@syslog:

; 80   : 		switch (c) {
; 81   : 		case 'd':

  001b6	8b 55 d0	 mov	 edx, DWORD PTR _ap$[ebp]
  001b9	83 c2 04	 add	 edx, 4
  001bc	89 55 d0	 mov	 DWORD PTR _ap$[ebp], edx
  001bf	8b 45 cc	 mov	 eax, DWORD PTR _i$[ebp]
  001c2	8b 4d d0	 mov	 ecx, DWORD PTR _ap$[ebp]
  001c5	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  001c8	89 54 85 e0	 mov	 DWORD PTR _logbuf$[ebp+eax*4+8], edx
  001cc	8b 45 cc	 mov	 eax, DWORD PTR _i$[ebp]
  001cf	83 c0 01	 add	 eax, 1
  001d2	89 45 cc	 mov	 DWORD PTR _i$[ebp], eax

; 82   : 			logbuf.loginfo[i++] = lflag ? (intptr_t) va_arg(ap, long_t)

  001d5	eb 2a		 jmp	 SHORT $LN8@syslog
$LN3@syslog:

; 83   : 										: (intptr_t) va_arg(ap, int_t);
; 84   : 			break;

  001d7	8b 4d d0	 mov	 ecx, DWORD PTR _ap$[ebp]
  001da	83 c1 04	 add	 ecx, 4
  001dd	89 4d d0	 mov	 DWORD PTR _ap$[ebp], ecx
  001e0	8b 55 cc	 mov	 edx, DWORD PTR _i$[ebp]
  001e3	8b 45 d0	 mov	 eax, DWORD PTR _ap$[ebp]
  001e6	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  001e9	89 4c 95 e0	 mov	 DWORD PTR _logbuf$[ebp+edx*4+8], ecx
  001ed	8b 55 cc	 mov	 edx, DWORD PTR _i$[ebp]
  001f0	83 c2 01	 add	 edx, 1
  001f3	89 55 cc	 mov	 DWORD PTR _i$[ebp], edx

; 85   : 		case 'u':

  001f6	eb 09		 jmp	 SHORT $LN8@syslog
$LN2@syslog:

; 86   : 		case 'x':
; 87   : 		case 'X':

  001f8	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  001fb	83 e8 01	 sub	 eax, 1
  001fe	89 45 0c	 mov	 DWORD PTR _format$[ebp], eax
$LN8@syslog:

; 88   : 			logbuf.loginfo[i++] = lflag ? (intptr_t) va_arg(ap, ulong_t)
; 89   : 										: (intptr_t) va_arg(ap, uint_t);
; 90   : 			break;
; 91   : 		case 'p':
; 92   : 			logbuf.loginfo[i++] = (intptr_t) va_arg(ap, void *);

  00201	e9 3d fe ff ff	 jmp	 $LN15@syslog
$LN14@syslog:

; 93   : 			break;

  00206	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _ap$[ebp], 0

; 94   : 		case 'c':

  0020d	8d 4d d8	 lea	 ecx, DWORD PTR _logbuf$[ebp]
  00210	51		 push	 ecx
  00211	8b 55 08	 mov	 edx, DWORD PTR _prio$[ebp]
  00214	52		 push	 edx
  00215	e8 00 00 00 00	 call	 _syslog_wri_log
  0021a	83 c4 08	 add	 esp, 8

; 95   : 			logbuf.loginfo[i++] = (intptr_t) va_arg(ap, int);

  0021d	52		 push	 edx
  0021e	8b cd		 mov	 ecx, ebp
  00220	50		 push	 eax
  00221	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@syslog
  00227	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0022c	58		 pop	 eax
  0022d	5a		 pop	 edx
  0022e	5f		 pop	 edi
  0022f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00232	33 cd		 xor	 ecx, ebp
  00234	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00239	83 c4 50	 add	 esp, 80			; 00000050H
  0023c	3b ec		 cmp	 ebp, esp
  0023e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00243	8b e5		 mov	 esp, ebp
  00245	5d		 pop	 ebp
  00246	c3		 ret	 0
  00247	90		 npad	 1
$LN28@syslog:
  00248	01 00 00 00	 DD	 1
  0024c	00 00 00 00	 DD	 $LN27@syslog
$LN27@syslog:
  00250	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00254	20 00 00 00	 DD	 32			; 00000020H
  00258	00 00 00 00	 DD	 $LN26@syslog
$LN26@syslog:
  0025c	6c		 DB	 108			; 0000006cH
  0025d	6f		 DB	 111			; 0000006fH
  0025e	67		 DB	 103			; 00000067H
  0025f	62		 DB	 98			; 00000062H
  00260	75		 DB	 117			; 00000075H
  00261	66		 DB	 102			; 00000066H
  00262	00		 DB	 0
  00263	90		 npad	 1
$LN29@syslog:
  00264	00 00 00 00	 DD	 $LN2@syslog
  00268	00 00 00 00	 DD	 $LN6@syslog
  0026c	00 00 00 00	 DD	 $LN4@syslog
  00270	00 00 00 00	 DD	 $LN7@syslog
  00274	00 00 00 00	 DD	 $LN5@syslog
  00278	00 00 00 00	 DD	 $LN3@syslog
  0027c	00 00 00 00	 DD	 $LN8@syslog
$LN25@syslog:
  00280	00		 DB	 0
  00281	06		 DB	 6
  00282	06		 DB	 6
  00283	06		 DB	 6
  00284	06		 DB	 6
  00285	06		 DB	 6
  00286	06		 DB	 6
  00287	06		 DB	 6
  00288	06		 DB	 6
  00289	06		 DB	 6
  0028a	06		 DB	 6
  0028b	06		 DB	 6
  0028c	06		 DB	 6
  0028d	06		 DB	 6
  0028e	06		 DB	 6
  0028f	06		 DB	 6
  00290	06		 DB	 6
  00291	06		 DB	 6
  00292	06		 DB	 6
  00293	06		 DB	 6
  00294	06		 DB	 6
  00295	06		 DB	 6
  00296	06		 DB	 6
  00297	06		 DB	 6
  00298	06		 DB	 6
  00299	06		 DB	 6
  0029a	06		 DB	 6
  0029b	06		 DB	 6
  0029c	06		 DB	 6
  0029d	06		 DB	 6
  0029e	06		 DB	 6
  0029f	06		 DB	 6
  002a0	06		 DB	 6
  002a1	06		 DB	 6
  002a2	06		 DB	 6
  002a3	06		 DB	 6
  002a4	06		 DB	 6
  002a5	06		 DB	 6
  002a6	06		 DB	 6
  002a7	06		 DB	 6
  002a8	06		 DB	 6
  002a9	06		 DB	 6
  002aa	06		 DB	 6
  002ab	06		 DB	 6
  002ac	06		 DB	 6
  002ad	06		 DB	 6
  002ae	06		 DB	 6
  002af	06		 DB	 6
  002b0	06		 DB	 6
  002b1	06		 DB	 6
  002b2	06		 DB	 6
  002b3	06		 DB	 6
  002b4	06		 DB	 6
  002b5	06		 DB	 6
  002b6	06		 DB	 6
  002b7	06		 DB	 6
  002b8	06		 DB	 6
  002b9	06		 DB	 6
  002ba	06		 DB	 6
  002bb	06		 DB	 6
  002bc	06		 DB	 6
  002bd	06		 DB	 6
  002be	06		 DB	 6
  002bf	06		 DB	 6
  002c0	06		 DB	 6
  002c1	06		 DB	 6
  002c2	06		 DB	 6
  002c3	06		 DB	 6
  002c4	06		 DB	 6
  002c5	06		 DB	 6
  002c6	06		 DB	 6
  002c7	06		 DB	 6
  002c8	06		 DB	 6
  002c9	06		 DB	 6
  002ca	06		 DB	 6
  002cb	06		 DB	 6
  002cc	06		 DB	 6
  002cd	06		 DB	 6
  002ce	06		 DB	 6
  002cf	06		 DB	 6
  002d0	06		 DB	 6
  002d1	06		 DB	 6
  002d2	06		 DB	 6
  002d3	06		 DB	 6
  002d4	06		 DB	 6
  002d5	06		 DB	 6
  002d6	06		 DB	 6
  002d7	06		 DB	 6
  002d8	01		 DB	 1
  002d9	06		 DB	 6
  002da	06		 DB	 6
  002db	06		 DB	 6
  002dc	06		 DB	 6
  002dd	06		 DB	 6
  002de	06		 DB	 6
  002df	06		 DB	 6
  002e0	06		 DB	 6
  002e1	06		 DB	 6
  002e2	06		 DB	 6
  002e3	02		 DB	 2
  002e4	03		 DB	 3
  002e5	06		 DB	 6
  002e6	06		 DB	 6
  002e7	06		 DB	 6
  002e8	06		 DB	 6
  002e9	06		 DB	 6
  002ea	06		 DB	 6
  002eb	06		 DB	 6
  002ec	06		 DB	 6
  002ed	06		 DB	 6
  002ee	06		 DB	 6
  002ef	06		 DB	 6
  002f0	04		 DB	 4
  002f1	06		 DB	 6
  002f2	06		 DB	 6
  002f3	05		 DB	 5
  002f4	06		 DB	 6
  002f5	01		 DB	 1
  002f6	06		 DB	 6
  002f7	06		 DB	 6
  002f8	01		 DB	 1
_syslog	ENDP
_TEXT	ENDS
END
