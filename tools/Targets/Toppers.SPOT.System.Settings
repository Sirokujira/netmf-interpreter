<Project  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"  ToolsVersion="4.0">

    <!-- Possibly propagated properties from enclosing or dependent projects -->
    <PropertyGroup>
        <_PLATFORM              Condition="'$(_PLATFORM)'==''"              >WINDOWS2</_PLATFORM>
        <FLAVOR                 Condition="'$(FLAVOR)'==''"                 >$(_FLAVOR)</FLAVOR>
        <PLATFORM               Condition="'$(PLATFORM)'==''"               >$(_PLATFORM)</PLATFORM>
        <PLATFORMS              Condition="'$(PLATFORMS)'==''"              >$(_PLATFORMS)</PLATFORMS>
        <MEMORY                 Condition="'$(MEMORY)'==''"                 >$(_MEMORY)</MEMORY>
        <TARGETLOCATION         Condition="'$(TARGETLOCATION)'==''"         >$(_TARGETLOCATION)</TARGETLOCATION>
        <MFSettingsFile         Condition="'$(MFSettingsFile)'==''"         >$(_MFSettingsFile)</MFSettingsFile>
        <SolutionRoot           Condition="'$(SolutionRoot)'==''"           >$(_SolutionRoot)</SolutionRoot>
        <CLEAN_INDEPENDENT_ONLY Condition="'$(CLEAN_INDEPENDENT_ONLY)'==''" >$(_CLEAN_INDEPENDENT_ONLY)</CLEAN_INDEPENDENT_ONLY>
        <Configuration          Condition="'$(Configuration)'==''"          >$(_Configuration)</Configuration>
        <TinyCLR_Platform       Condition="'$(TinyCLR_Platform)'==''"       >$(_TinyCLR_Platform)</TinyCLR_Platform>
        <BuildNumber            Condition="'$(BuildNumber)'==''"            >$(_BuildNumber)</BuildNumber>
        <RevisionNumber         Condition="'$(RevisionNumber)'==''"         >$(_RevisionNumber)</RevisionNumber>
        <SignBuild              Condition="'$(SignBuild)'==''"              >$(_SignBuild)</SignBuild>
        <reducesize             Condition="'$(reducesize)'==''"             >$(_reducesize)</reducesize>
    </PropertyGroup>
    
    <PropertyGroup>
        <!-- Toppers Depends Environment Variant -->
        <!-- <TOPPERS_OSTYPE>hrp2</TOPPERS_OSTYPE> -->
        <!-- <TOPPERS_MODULES>EV3</TOPPERS_MODULES> -->
        <!-- GR-PEACH -->
        <TOPPERS_OSTYPE>asp</TOPPERS_OSTYPE>
        <!-- <TOPPERS_OSTYPE>asp3</TOPPERS_OSTYPE> -->
        <!-- <TOPPERS_VERSION>3.2.0</TOPPERS_VERSION> -->
        <TOPPERS_MODULES>gr-peach</TOPPERS_MODULES>
        <!-- Zynq(ZYBO) -->
        <!-- <TOPPERS_OSTYPE>fmp</TOPPERS_OSTYPE> -->
        <!-- <TOPPERS_MODULES>zynq</TOPPERS_MODULES> -->
        <SRCDIR>$(SPOCLIENT)/DeviceCode/Targets/OS/Toppers/$(TOPPERS_OSTYPE)</SRCDIR>
    </PropertyGroup>
    
    <!-- Toppers Common Property? -->
    <PropertyGroup>
        <!-- makefile : http://minus9d.hatenablog.com/entry/20140203/1391436293 -->
        <!-- http://www.ie.u-ryukyu.ac.jp/~e085739/c.makefile.tuts.html -->
        <EXE                    Condition="'$(EXE)'==''"                    >$(_EXE)</EXE>
        <OBJEXT                 Condition="'$(OBJEXT)'==''"                 >o</OBJEXT>
        <DBGENV                 Condition="'$(DBGENV)'==''"                 ></DBGENV>
        <KERNEL_LIB             Condition="'$(KERNEL_LIB)'==''"             ></KERNEL_LIB>
        <KERNEL_FUNCOBJS        Condition="'$(KERNEL_FUNCOBJS)'==''"        ></KERNEL_FUNCOBJS>
        <ENABLE_TRACE           Condition="'$(ENABLE_TRACE)'==''"           ></ENABLE_TRACE>
        <PERL                   Condition="'$(PERL)'==''"                   >C:/strawberry/perl/bin</PERL>
        <RUBY                   Condition="'$(RUBY)'==''"                   >C:/Ruby200-x64/bin</RUBY>
        <CFG                    Condition="'$(CFG)'==''"                    >$(SRCDIR)/cfg/cfg/cfg.exe</CFG>
        
        <CFG1_OUT>cfg1_out</CFG1_OUT>
        <CFG2_OUT>cfg2_out</CFG2_OUT>
        <CFG3_OUT>cfg3_out</CFG3_OUT>
        <KERNEL1_OUT>kernel_cfg</KERNEL1_OUT>
        <KERNEL1_MEMOUT>kernel_mem</KERNEL1_MEMOUT>
        <KERNEL2_MEMOUT>kernel_mem2</KERNEL2_MEMOUT>
        <KERNEL3_MEMOUT>kernel_mem3</KERNEL3_MEMOUT>
        
        <LIBKERNELDIR           Condition="'$(LIBKERNELDIR)'==''">$(SRCDIR)</LIBKERNELDIR>
        <KERNELOBJS             Condition="'$(KERNELOBJS)'==''">kernel_cfg.$(OBJEXT) kernel_mem2.$(OBJEXT)</KERNELOBJS>
        
        <ALL_LIBS></ALL_LIBS>
        
        <OMIT_DEBUG_INFO>1</OMIT_DEBUG_INFO>
        <BUILD_LOADABLE_MODULE>1</BUILD_LOADABLE_MODULE>
        <!-- <BUILD_MODULE>1</BUILD_MODULE> -->
        
        <TOPPERS_BUILD_LIBS>$(GNU_TOOLS_BIN)/../arm-none-eabi/lib/libm.a $(GNU_TOOLS_BIN)/../arm-none-eabi/lib/libc.a $(GNU_TOOLS_BIN)/../lib/gcc/arm-none-eabi/$(GCC_VER)/libgcc.a</TOPPERS_BUILD_LIBS>
        <TOPPERS_KERNEL_LIBS>$(TOPPERS_BUILD_LIBS) libkernel.a</TOPPERS_KERNEL_LIBS>
        
        <LIBS>$(LIBS) $(CXXLIBS)</LIBS>
        <INCLUDES>$(INCLUDES)</INCLUDES>
        <CFLAGS>$(COPTS) $(CDEFS) $(INCLUDES)</CFLAGS>
        
        <APPL_DIR>$(APPLDIR) $(SRCDIR)/library</APPL_DIR>
        
        <!-- SystemService Define -->
        <SYSSVC_DIR>$(SYSSVC_DIR) $(SRCDIR)/syssvc $(SRCDIR)/library</SYSSVC_DIR>
        <SYSSVC_COBJS>$(SYSSVC_COBJS)</SYSSVC_COBJS>
        <SYSSVC_ASMOBJS>$(SYSSVC_ASMOBJS)</SYSSVC_ASMOBJS>
        <SYSSVC_CFLAGS>$(SYSSVC_CFLAGS) -DTOPPERS_SVC_CALL</SYSSVC_CFLAGS>
        <SYSSVC_LIBS>$(SYSSVC_LIBS)</SYSSVC_LIBS>
        
        <!-- Kernel Defines -->
        <KERNEL_DIR>$(KERNEL_DIR) $(SRCDIR)/kernel</KERNEL_DIR>
    </PropertyGroup>
    
    <!-- use Target module -->
    <Choose>
        <When Condition=" '$(TOPPERS_MODULES)'=='EV3' ">
            <PropertyGroup>
                <TARGETNAME             Condition="'$(TARGETNAME)'==''">ev3_gcc</TARGETNAME>
                <TARGETDIR              Condition="'$(TARGETDIR)'==''">$(SRCDIR)/target/$(TARGETNAME)</TARGETDIR>
                <KERNELDIR              Condition="'$(KERNELDIR)'==''">$(TARGETDIR)/kernel</KERNELDIR>
                <LOADERDIR              Condition="'$(LOADERDIR)'==''">$(TARGETDIR)/dmloader</LOADERDIR>
                <OBJDIR                 Condition="'$(OBJDIR)'==''">$(SRCDIR)/workspace/obj</OBJDIR>
            </PropertyGroup>
        </When>
        <When Condition=" '$(TOPPERS_MODULES)'=='Zynq' ">
            <PropertyGroup>
                <TARGETNAME             Condition="'$(TARGETNAME)'==''">zynq_gcc</TARGETNAME>
                <TARGETDIR              Condition="'$(TARGETDIR)'==''">$(SRCDIR)/target/$(TARGETNAME)</TARGETDIR>
                <KERNELDIR              Condition="'$(KERNELDIR)'==''">$(SRCDIR)/kernel</KERNELDIR>
            </PropertyGroup>
        </When>
        <When Condition=" '$(TOPPERS_MODULES)'=='gr-peach' ">
            <PropertyGroup>
                <TARGETNAME             Condition="'$(TARGETNAME)'==''">gr_peach_gcc</TARGETNAME>
                <TARGETDIR              Condition="'$(TARGETDIR)'==''">$(SRCDIR)/target/$(TARGETNAME)</TARGETDIR>
                <KERNELDIR              Condition="'$(KERNELDIR)'==''">$(SRCDIR)/kernel</KERNELDIR>
            </PropertyGroup>
        </When>
    </Choose>
    
    <!-- target Property -->
    <Choose>
        <!-- <When Condition=" '$(TOPPERS_MODULES)'=='EV3' and '$(TOPPERS_OSTYPE)'=='hrp2' and '$(OutputType)'=='DynamicLoading'"> -->
        <When Condition=" '$(TOPPERS_MODULES)'=='EV3' and '$(TOPPERS_OSTYPE)'=='hrp2'">
            <PropertyGroup>
                <!-- Toppers HRP2 + EV3 -->
                <APPNAME>app</APPNAME>
                <CFGINCLUDE             Condition="'$(CFGINCLUDE)'==''">-I$(SRCDIR) -I$(SRCDIR)/arch -I$(SRCDIR)/include -I$(KERNELDIR) -I$(SRCDIR)/workspace/common -I$(SRCDIR)/arch/arm_gcc/am1808 -I$(SRCDIR)/arch/arm_gcc/common -I$(TARGETDIR) -I$(TARGETDIR)/api -I$(TARGETDIR)/api/include -I$(TARGETDIR)/drivers/common/include -I$(TARGETDIR)/TLSF-2.4.6/include -I$(TARGETDIR)/platform/include -I$(TARGETDIR)/pil/include</CFGINCLUDE>
                <DRIVERSINCLUDE>-I$(TARGETDIR)/drivers/platform/include -I$(TARGETDIR)/drivers/linux/arch/arm/mach-davinci/include -I$(TARGETDIR)/drivers/linux/arch/arm/include -I$(TARGETDIR)/drivers/linux/include -I$(TARGETDIR)/drivers/common/virtual-linux-kernel/include -I$(TARGETDIR)/drivers -I$(TARGETDIR)/drivers/gpio/include -I$(TARGETDIR)/drivers/brick/include -I$(TARGETDIR)/drivers/common/include -I$(TARGETDIR)/drivers/console/include -I$(TARGETDIR)/drivers/fatfs/include  -I$(TARGETDIR)/drivers/lcd/include -I$(TARGETDIR)/drivers/motor/include -I$(TARGETDIR)/drivers/newlib/include -I$(TARGETDIR)/drivers/sensor/include -I$(TARGETDIR)/drivers/soc/include -I$(TARGETDIR)/drivers/sound/include -I$(TARGETDIR)/drivers/soc/AM1808_StarterWare_1_00_03_03/include -I$(TARGETDIR)/drivers/soc/AM1808_StarterWare_1_00_03_03/include/hw -I$(TARGETDIR)/drivers/sensor/analog/include -I$(TARGETDIR)/drivers/sensor/uart/include -I$(TARGETDIR)/drivers/sensor/i2c/include -I$(TARGETDIR)/drivers/bluetooth/include -I$(TARGETDIR)/drivers/mbed/include -I$(TARGETDIR)/drivers/usbmsc/include</DRIVERSINCLUDE>
                <MODULESINCLUDE>-I$(SRCDIR)/modules/btstack/platforms/ev3rt -I$(SRCDIR)/modules/mbed-on-toppers/ev3rt -I$(SRCDIR)/modules/usblib/usblib/include</MODULESINCLUDE>
                <CFG1COMPILEINCLUDE     Condition="'$(CFG1COMPILEINCLUDE)'==''">-I$(SRCDIR) -I$(SRCDIR)/arch -I$(SRCDIR)/include -I$(KERNELDIR) -I$(SRCDIR)/workspace/common -I$(SRCDIR)/arch/arm_gcc/am1808 -I$(SRCDIR)/arch/arm_gcc/common -I$(TARGETDIR) -I$(TARGETDIR)/api -I$(TARGETDIR)/api/include -I$(TARGETDIR)/TLSF-2.4.6/include -I$(TARGETDIR)/platform/include -I$(TARGETDIR)/pil/include -I$(TARGETDIR)/dmloader/app -I$(TARGETDIR)/drivers/platform/include -I$(TARGETDIR)/drivers/linux/arch/arm/mach-davinci/include -I$(TARGETDIR)/drivers/linux/arch/arm/include -I$(TARGETDIR)/drivers/linux/include -I$(TARGETDIR)/drivers/common/virtual-linux-kernel/include -I$(TARGETDIR)/drivers -I$(TARGETDIR)/drivers/gpio/include -I$(TARGETDIR)/drivers/brick/include -I$(TARGETDIR)/drivers/common/include -I$(TARGETDIR)/drivers/console/include -I$(TARGETDIR)/drivers/fatfs/include  -I$(TARGETDIR)/drivers/lcd/include -I$(TARGETDIR)/drivers/motor/include -I$(TARGETDIR)/drivers/newlib/include -I$(TARGETDIR)/drivers/sensor/include -I$(TARGETDIR)/drivers/soc/include -I$(TARGETDIR)/drivers/sound/include -I$(TARGETDIR)/drivers/soc/AM1808_StarterWare_1_00_03_03/include -I$(TARGETDIR)/drivers/soc/AM1808_StarterWare_1_00_03_03/include/hw -I$(TARGETDIR)/drivers/sensor/analog/include -I$(TARGETDIR)/drivers/sensor/uart/include -I$(TARGETDIR)/drivers/sensor/i2c/include -I$(TARGETDIR)/drivers/bluetooth/include -I$(TARGETDIR)/drivers/mbed/include -I$(TARGETDIR)/drivers/usbmsc/include -I$(SRCDIR)/modules/usblib/include/hw -I$(SRCDIR)/modules/btstack/platforms/ev3rt -I$(SRCDIR)/modules/mbed-on-toppers/ev3rt -I$(SRCDIR)/modules/usblib/usblib/include -I$(TARGETDIR)/api -I$(SPOCLIENT)/$(Directory)</CFG1COMPILEINCLUDE>
                
                <APPLNAME               Condition="'$(APPLNAME)'==''">$(SPOCLIENT)/$(Directory)/$(APPNAME)</APPLNAME>
                <APPL_CFG>$(APPLNAME).cfg</APPL_CFG>
                <APPL_CDL>$(APPLNAME).cdl</APPL_CDL>
                <APPL_ASMOBJS />
                
                <!-- module Parameters -->
                <MODCFG                 Condition="'$(MODCFG)'==''">$(SRCDIR)/workspace/obj</MODCFG>
                <MODDIR                 Condition="'$(MODDIR)'==''">$(SRCDIR)/workspace/obj</MODDIR>
                <MODOBJS                Condition="'$(MODOBJS)'==''">cli_main.$(OBJEXT) cli_sensor.$(OBJEXT) cli_motor.$(OBJEXT) </MODOBJS>
                
                <SYSSVC_COBJS>$(SYSSVC_COBJS) banner.$(OBJEXT) syslog.$(OBJEXT) serial.$(OBJEXT) logtask.$(OBJEXT) $(CXXRTS)</SYSSVC_COBJS>
                <!-- tlsf ev3 only? -->
                <SYSSVC_COBJS>$(SYSSVC_COBJS) strerror.$(OBJEXT) tlsf.$(OBJEXT) vasyslog.$(OBJEXT)</SYSSVC_COBJS>
                <!-- am1808 -->
                <SYSSVC_COBJS>$(SYSSVC_COBJS) tl16c550.$(OBJEXT)</SYSSVC_COBJS>
                
                <!-- start -->
                <!-- set ld file -->
                <TOPPERS_START_OBJS>start.$(OBJEXT)</TOPPERS_START_OBJS>
                <!-- helloev3 -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) app.$(OBJEXT) cli_main.$(OBJEXT) cli_motor.$(OBJEXT) cli_sensor.$(OBJEXT)</TOPPERS_APPL_OBJS>
                <!-- ev3api -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) ev3api.$(OBJEXT) ev3api_cfg.$(OBJEXT) ev3api_battery.$(OBJEXT) ev3api_brick.$(OBJEXT) ev3api_fs.$(OBJEXT) ev3api_newlib.$(OBJEXT) ev3api_lcd.$(OBJEXT) ev3api_motor.$(OBJEXT) ev3api_sensor.$(OBJEXT) ev3api_speaker.$(OBJEXT)</TOPPERS_APPL_OBJS>
                <!-- appl objs -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) log_output.$(OBJEXT) t_perror.$(OBJEXT) </TOPPERS_APPL_OBJS>
                <!-- dmloader? -->
                <TOPPERS_MODULES_OBJS>apploader.$(OBJEXT) dmloader.$(OBJEXT)</TOPPERS_MODULES_OBJS>
                <!-- ev3 drivers -->
                <TOPPERS_DRIVER_OBJS>analog_dri.$(OBJEXT) bluetooth_dri.$(OBJEXT) brick_dri.$(OBJEXT) console_dri.$(OBJEXT) console_menu.$(OBJEXT) cp15.$(OBJEXT) cppi41dma.$(OBJEXT) crc16.$(OBJEXT) crc32.$(OBJEXT) davinci_iic_dri.$(OBJEXT) diskio.$(OBJEXT) driver_debug.$(OBJEXT) driver_interface_bluetooth.$(OBJEXT) driver_interface_brick.$(OBJEXT) driver_interface_filesys.$(OBJEXT) driver_interface_sound.$(OBJEXT) edma.$(OBJEXT) elf32.$(OBJEXT) evmAM1808_usb.$(OBJEXT) fatfs_dri.$(OBJEXT) fatfs_syscall.$(OBJEXT) ff.$(OBJEXT) gpio_dri.$(OBJEXT) gui.$(OBJEXT) hires_alarm.$(OBJEXT) hires_cyclic.$(OBJEXT) i2c_dri.$(OBJEXT) lcd_dri.$(OBJEXT) lcd_font.$(OBJEXT) lcd_spi.$(OBJEXT) mbed_dri.$(OBJEXT) minIni.$(OBJEXT) mmcsd.$(OBJEXT) mmcsd_dri.$(OBJEXT) mmcsd_proto.$(OBJEXT) mmcsd_rw.$(OBJEXT) mmcsdlib.$(OBJEXT) motor_dri.$(OBJEXT) newlib_dri.$(OBJEXT) pru.$(OBJEXT) pru_suart.$(OBJEXT) psc.$(OBJEXT) serial.$(OBJEXT) serial_mod.$(OBJEXT) soc_cache.$(OBJEXT) soc_edma.$(OBJEXT) soc_interrupt.$(OBJEXT) sound_dri.$(OBJEXT) spi.$(OBJEXT) suart_api.$(OBJEXT) suart_utils.$(OBJEXT) target_serial_dbsio.$(OBJEXT) uart.$(OBJEXT) uart_dri.$(OBJEXT) unicode.$(OBJEXT) utils.$(OBJEXT) mmcsd_proto.$(OBJEXT) ev3cyclic_dri.$(OBJEXT) ev3_hacks.$(OBJEXT) ev3main.$(OBJEXT) ev3rt_config.$(OBJEXT) target_serial.$(OBJEXT) lcd_dri.$(OBJEXT) ev3exception.$(OBJEXT) core_config.$(OBJEXT) usb_dev_msc.$(OBJEXT) usb_msc_structs.$(OBJEXT) usbmsc_dri.$(OBJEXT) usbmsc_media_functions.$(OBJEXT) usbphyGS60.$(OBJEXT) zmodem-newlib.$(OBJEXT) zmodem-toppers.$(OBJEXT)</TOPPERS_DRIVER_OBJS>
                
                <!-- http://stackoverflow.com/questions/24881/how-do-i-fix-for-loop-initial-declaration-used-outside-c99-mode-gcc-error -->
                <!-- Toppers Custom -->
                <CTOPPERS_CUSTOM_WARNING_OFF_FLAGS>-Wimplicit-function-declaration</CTOPPERS_CUSTOM_WARNING_OFF_FLAGS>
                <CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS></CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS>
                <CTOPPERS_CUSTOM_FLAGS>-g -std=gnu99 -DBUILD_EV3_PLATFORM -DCONFIG_FB_DEFERRED_IO -D__KERNEL__ -DSUPPORT_XLOG_SYS -Dgcc -DALLFUNC -D__TARGET_ARCH_ARM=5 -Dam1808 $(CTOPPERS_CUSTOM_WARNING_OFF_FLAGS)</CTOPPERS_CUSTOM_FLAGS>
                <!-- EV3 -->
                <CXXTOPPERS_CUSTOM_FLAGS>-fPIC -mno-pic-data-is-text-relative -nostdlib -fno-strict-aliasing -DCONFIG_FB_DEFERRED_IO -D__KERNEL__ -DSUPPORT_XLOG_SYS -Dgcc -DALLFUNC -D__TARGET_ARCH_ARM=5 -Dam1808 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT</CXXTOPPERS_CUSTOM_FLAGS>
                <ASMTOPPERS_CUSTOM_FLAGS>-g -mlittle-endian -nostartfiles -O2 -Wall -DTOPPERS_LABEL_ASM -D__TARGET_ARCH_ARM=5 -I$(SRCDIR)/kernel -DALLFUNC -fno-strict-aliasing</ASMTOPPERS_CUSTOM_FLAGS>
                
                <TEXT_START_ADDRESS>0xC0008000</TEXT_START_ADDRESS>
                <DATA_START_ADDRESS>0xC0108000</DATA_START_ADDRESS>
                
                <!-- cfg parameter -->
                <CFG_COBJS>$(CFG_COBJS) $(CFG1_OUT).$(OBJEXT)</CFG_COBJS>
                <CFG_ASMOBJS>$(CFG_ASMOBJS)</CFG_ASMOBJS>
                
                <CFG2_OUT_SRCS>kernel_cfg.h kernel_cfg.c kernel_mem2.c $(CFG2_OUT_SRCS)</CFG2_OUT_SRCS>
                <CFG2_COBJS>kernel_cfg.$(OBJEXT) kernel_mem2.$(OBJEXT) $(CFG2_COBJS)</CFG2_COBJS>
                <CFG2_ASMOBJS>$(CFG2_ASMOBJS)</CFG2_ASMOBJS>
                
                <CFG3_OUT_SRCS>kernel_cfg.h kernel_cfg.c kernel_mem3.c $(CFG3_OUT_SRCS)</CFG3_OUT_SRCS>
                <CFG3_COBJS>kernel_cfg.$(OBJEXT) kernel_mem3.$(OBJEXT) $(CFG3_COBJS)</CFG3_COBJS>
                <CFG3_ASMOBJS>$(CFG3_ASMOBJS)</CFG3_ASMOBJS>
                
                <!-- kernel app build obj -->
                <ALL_CFG_COBJS>kernel_cfg.$(OBJEXT) kernel_mem.$(OBJEXT) kernel_mem2.$(OBJEXT) kernel_mem3.$(OBJEXT) cfg1_out.$(OBJEXT)</ALL_CFG_COBJS>
                <!-- Configurator Rules -->
                <!-- <ALL_CFG_COBJS>$(sort $(CFG_COBJS) $(CFG2_COBJS) $(CFG3_COBJS) cfg1_out.$(OBJEXT))</ALL_CFG_COBJS> -->
                <ALL_CFG_COBJS>$(CFG_COBJS) $(CFG2_COBJS) $(CFG3_COBJS) cfg1_out.$(OBJEXT)</ALL_CFG_COBJS>
                <!-- <ALL_CFG_ASMOBJS>$(sort $(CFG_ASMOBJS) $(CFG2_ASMOBJS) $(CFG3_ASMOBJS))</ALL_CFG_ASMOBJS> -->
                <ALL_CFG_ASMOBJS>$(CFG_ASMOBJS) $(CFG2_ASMOBJS) $(CFG3_ASMOBJS)</ALL_CFG_ASMOBJS>
                
                <!-- Target File-->
                <!-- Linker Scripts Define -->
                <!-- DEF_HRP2_ONLY -->
                <CFG1_OUT_LDSCRIPT>$(SRCDIR)/arch/arm_gcc/common/cfg1_out.ld</CFG1_OUT_LDSCRIPT>
                <CFG2_OUT_LDSCRIPT>cfg2_out.ld</CFG2_OUT_LDSCRIPT>
                <CFG3_OUT_LDSCRIPT>cfg3_out.ld</CFG3_OUT_LDSCRIPT>
                <LDSCRIPT>ldscript.ld</LDSCRIPT>
                <CLEAN_FILES>$(CLEAN_FILES) $(CFG2_OUT_LDSCRIPT) $(CFG3_OUT_LDSCRIPT) $(LDSCRIPT)</CLEAN_FILES>
                <!-- END_HRP2_ONLY -->
                
                <CFG1_OUT_TARGETFILE></CFG1_OUT_TARGETFILE>
                <CFG2_OUT_TARGETFILE>$(TARGETDIR)/target.tf</CFG2_OUT_TARGETFILE>
                <CFG3_OUT_TARGETFILE>$(TARGETDIR)/target_opt.tf</CFG3_OUT_TARGETFILE>
                <CFG4_OUT_TARGETFILE>$(TARGETDIR)/target_mem.tf</CFG4_OUT_TARGETFILE>
                
                <!-- helloev3 -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) cli_main.$(OBJEXT) cli_motor.$(OBJEXT) cli_sensor.$(OBJEXT)</TOPPERS_APPL_OBJS>
                <!-- ev3api -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) ev3api.$(OBJEXT) ev3api_cfg.$(OBJEXT) ev3api_battery.$(OBJEXT) ev3api_brick.$(OBJEXT) ev3api_fs.$(OBJEXT) ev3api_newlib.$(OBJEXT) ev3api_lcd.$(OBJEXT) ev3api_motor.$(OBJEXT) ev3api_sensor.$(OBJEXT) ev3api_speaker.$(OBJEXT)</TOPPERS_APPL_OBJS>
                <!-- appl objs -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) log_output.$(OBJEXT) t_perror.$(OBJEXT) </TOPPERS_APPL_OBJS>
                <!-- ev3 drivers -->
                <TOPPERS_DRIVER_OBJS>analog_dri.$(OBJEXT) bluetooth_dri.$(OBJEXT) bluetooth_spp_slave.$(OBJEXT) bluetooth_init_cc2560_2.44.$(OBJEXT) brick_dri.$(OBJEXT) bt_control_cc256x.$(OBJEXT) btstack_memory.$(OBJEXT) console_dri.$(OBJEXT) console_menu.$(OBJEXT) cp15.$(OBJEXT) diskio.$(OBJEXT) driver_debug.$(OBJEXT) driver_interface_brick.$(OBJEXT) driver_interface_filesys.$(OBJEXT) driver_interface_sound.$(OBJEXT) edma.$(OBJEXT) fatfs_dri.$(OBJEXT) fatfs_syscall.$(OBJEXT) ff.$(OBJEXT) gpio_dri.$(OBJEXT) gui.$(OBJEXT) hires_alarm.$(OBJEXT) hires_cyclic.$(OBJEXT) i2c_dri.$(OBJEXT) lcd_dri.$(OBJEXT) lcd_font.$(OBJEXT) lcd_spi.$(OBJEXT) memory_pool.$(OBJEXT) minIni.$(OBJEXT) mmcsd.$(OBJEXT) mmcsd_dri.$(OBJEXT) mmcsd_rw.$(OBJEXT) mmcsdlib.$(OBJEXT) motor_dri.$(OBJEXT) newlib_dri.$(OBJEXT) pru.$(OBJEXT) pru_suart.$(OBJEXT) psc.$(OBJEXT) remote_device_db_memory.$(OBJEXT) rfcomm.$(OBJEXT) run_loop.$(OBJEXT) run_loop_toppers.$(OBJEXT) sdp.$(OBJEXT) sdp_client.$(OBJEXT) sdp_parser.$(OBJEXT) sdp_query_rfcomm.$(OBJEXT) sdp_util.$(OBJEXT) serial_mod.$(OBJEXT) soc_cache.$(OBJEXT) soc_edma.$(OBJEXT) sound_dri.$(OBJEXT) spi.$(OBJEXT) suart_api.$(OBJEXT) suart_utils.$(OBJEXT) uart.$(OBJEXT) uart_dri.$(OBJEXT) unicode.$(OBJEXT) utils.$(OBJEXT) mmcsd_proto.$(OBJEXT) ev3cyclic_dri.$(OBJEXT) ev3_hacks.$(OBJEXT) ev3main.$(OBJEXT) ev3rt_config.$(OBJEXT) target_serial.$(OBJEXT)</TOPPERS_DRIVER_OBJS>
                
                <!-- Configuration Defines -->
                <!-- module(EV3 only) -->
                <CFG_MODULE_TABS>--api-table=$(LOADERDIR)/app/common/module_api.csv --cfg1-def-table=$(LOADERDIR)/app/common/module_def.csv --api-table=$(TARGETDIR)/api/ev3api.csv</CFG_MODULE_TABS>
                <CFG_TABS               Condition="'$(CFG_TABS)'==''">$(CFG_MODULE_TABS)</CFG_TABS>
                <MODULE_CFG1_OUT_TARGETFILE></MODULE_CFG1_OUT_TARGETFILE>
                <MODULE_CFG2_OUT_TARGETFILE>$(LOADERDIR)/app/common/module.tf</MODULE_CFG2_OUT_TARGETFILE>
                
                <!-- Both -->
                <CONFIG_EV3RT_APPLICATION>1</CONFIG_EV3RT_APPLICATION>
                <!-- <LDSCRIPT>$(LOADERDIR)/app/app.ld</LDSCRIPT> -->
                
                <!-- Linux build -->
                <!-- http://www.gadgety.net/shin/tips/unix/compiler.html -->
                <!-- ld file -->
                <KERNEL_ASMOBJS>$(KERNEL_ASMOBJS) chip_support.$(OBJEXT) core_support.$(OBJEXT)</KERNEL_ASMOBJS>
                <!-- kernel common -->
                <KERNEL_COBJS>alarm.$(OBJEXT) cyclic.$(OBJEXT) dataqueue.$(OBJEXT) eventflag.$(OBJEXT) exception.$(OBJEXT) interrupt.$(OBJEXT) mem_manage.$(OBJEXT) memory.$(OBJEXT) mempfix.$(OBJEXT) mutex.$(OBJEXT) overrun.$(OBJEXT) pridataq.$(OBJEXT) semaphore.$(OBJEXT) startup.$(OBJEXT) sys_manage.$(OBJEXT) task.$(OBJEXT) task_except.$(OBJEXT) task_manage.$(OBJEXT) task_refer.$(OBJEXT) task_sync.$(OBJEXT) time_event.$(OBJEXT) time_manage.$(OBJEXT) wait.$(OBJEXT)</KERNEL_COBJS>
                <!-- kernel target(ev3) -->
                <KERNEL_COBJS>$(KERNEL_COBJS) chip_config.$(OBJEXT) svc_table.$(OBJEXT) chip_timer.$(OBJEXT) target_config.$(OBJEXT)</KERNEL_COBJS>
                <KERNEL_CFLAGS>$(KERNEL_CFLAGS) -I$(SRCDIR)/kernel</KERNEL_CFLAGS>
                <APPL_COBJS>$(APPL_COBJS) log_output.$(OBJEXT) t_perror.$(OBJEXT) </APPL_COBJS>
                <APPL_CFLAGS />
                <APPL_LIBS>$(APPL_LIBS)</APPL_LIBS>
                
                <!-- Compiler Various Defines -->
                <KERNEL_LIB_OBJS>$(KERNEL_ASMOBJS) $(KERNEL_COBJS)</KERNEL_LIB_OBJS>
                
                <!-- Custom -->
                <SD_DIR Condition="'$(SD_DIR)'==''">$(_SD_DIR)</SD_DIR>
                
                <USE_CFG_PASS3>true</USE_CFG_PASS3>
                
                <!-- mkimage Setting -->
                <!-- WINDOWS Case -->
                <MKIMAGE                Condition="'$(MKIMAGE)'==''"  >$(SRCDIR)/../bin/mkimage.exe</MKIMAGE>
                
                <!-- EV3 -->
                <CFG_KERNEL_TABS>--api-table=$(KERNELDIR)/kernel_api.csv --cfg1-def-table=$(KERNELDIR)/kernel_def.csv --cfg1-def-table=$(TARGETDIR)/am1808/chip_def.csv --cfg1-def-table=$(SRCDIR)/arch/arm_gcc/common/core_def.csv --api-table=$(TARGETDIR)/api/ev3api.csv</CFG_KERNEL_TABS>
            </PropertyGroup>
        </When>
        <When Condition=" '$(TOPPERS_MODULES)'=='zynq' and '$(TOPPERS_OSTYPE)'=='fmp' ">
            <PropertyGroup>
                <!-- Toppers FMP + Zynq -->
                <APPNAME>sample1</APPNAME>
                <CFGINCLUDE             Condition="'$(CFGINCLUDE)'==''">-I$(SRCDIR) -I$(SRCDIR)/arch -I$(SRCDIR)/include -I$(KERNELDIR) -I$(SRCDIR)/arch/arm_gcc/mpcore -I$(SRCDIR)/arch/arm_gcc/common -I$(TARGETDIR)</CFGINCLUDE>
                <CFG1COMPILEINCLUDE     Condition="'$(CFG1COMPILEINCLUDE)'==''">-I$(SRCDIR) -I$(SRCDIR)/arch -I$(SRCDIR)/include -I$(KERNELDIR) -I$(SRCDIR)/arch/arm_gcc/mpcore -I$(SRCDIR)/arch/arm_gcc/common -I$(TARGETDIR) -I$(SPOCLIENT)/$(Directory)</CFG1COMPILEINCLUDE>
                <APPLNAME               Condition="'$(APPLNAME)'==''">$(SPOCLIENT)/$(Directory)/$(APPNAME)</APPLNAME>
                <APPL_CFG>$(APPLNAME).cfg</APPL_CFG>
                <APPL_CDL>$(APPLNAME).cdl</APPL_CDL>
                <APPL_ASMOBJS />
                
                <SYSSVC_COBJS>$(SYSSVC_COBJS) banner.$(OBJEXT) syslog.$(OBJEXT) serial.$(OBJEXT) logtask.$(OBJEXT) $(CXXRTS)</SYSSVC_COBJS>
                <SYSSVC_COBJS>$(SYSSVC_COBJS) chip_serial.$(OBJEXT) scif.$(OBJEXT)</SYSSVC_COBJS>
                <SYSSVC_COBJS>$(SYSSVC_COBJS) strerror.$(OBJEXT) vasyslog.$(OBJEXT)</SYSSVC_COBJS>
                
                <!-- start -->
                <TOPPERS_START_OBJS>start.$(OBJEXT)</TOPPERS_START_OBJS>
                <!-- helloev3 -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) app.$(OBJEXT) cli_main.$(OBJEXT) cli_motor.$(OBJEXT) cli_sensor.$(OBJEXT)</TOPPERS_APPL_OBJS>
                <!-- ev3api -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) ev3api.$(OBJEXT) ev3api_cfg.$(OBJEXT) ev3api_battery.$(OBJEXT) ev3api_brick.$(OBJEXT) ev3api_fs.$(OBJEXT) ev3api_newlib.$(OBJEXT) ev3api_lcd.$(OBJEXT) ev3api_motor.$(OBJEXT) ev3api_sensor.$(OBJEXT) ev3api_speaker.$(OBJEXT)</TOPPERS_APPL_OBJS>
                <!-- appl objs -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) log_output.$(OBJEXT) t_perror.$(OBJEXT) </TOPPERS_APPL_OBJS>
                
                <!-- Toppers Custom -->
                <CTOPPERS_CUSTOM_WARNING_OFF_FLAGS>-Wimplicit-function-declaration</CTOPPERS_CUSTOM_WARNING_OFF_FLAGS>
                <CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS></CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS>
                <CTOPPERS_CUSTOM_FLAGS>-g -std=gnu99 $(AS_CC_CPP_COMMON_FLAGS) -DCONFIG_FB_DEFERRED_IO -D__KERNEL__ -DSUPPORT_XLOG_SYS -Dgcc -DALLFUNC -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM $(CTOPPERS_CUSTOM_WARNING_OFF_FLAGS)</CTOPPERS_CUSTOM_FLAGS>
                <!-- GR-PEACH -->
                <CXXTOPPERS_CUSTOM_FLAGS>$(CC_CPP_COMMON_FLAGS) $(AS_CC_CPP_COMMON_FLAGS) -DCONFIG_FB_DEFERRED_IO -D__KERNEL__ -DSUPPORT_XLOG_SYS -Dgcc -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM $(CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS)</CXXTOPPERS_CUSTOM_FLAGS>
                <ASMTOPPERS_CUSTOM_FLAGS>-g -mlittle-endian -nostdlib -O2 -Wall -DTOPPERS_LABEL_ASM -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM -I$(SRCDIR)/kernel -DALLFUNC -fno-strict-aliasing</ASMTOPPERS_CUSTOM_FLAGS>
                
                <TEXT_START_ADDRESS></TEXT_START_ADDRESS>
                <DATA_START_ADDRESS></DATA_START_ADDRESS>
                
                <!-- cfg parameter -->
                <CFG_COBJS>$(CFG_COBJS) $(CFG1_OUT).$(OBJEXT)</CFG_COBJS>
                <CFG_ASMOBJS>$(CFG_ASMOBJS)</CFG_ASMOBJS>
                
                <CFG2_OUT_SRCS>kernel_cfg.h kernel_cfg.c kernel_mem2.c $(CFG2_OUT_SRCS)</CFG2_OUT_SRCS>
                <CFG2_COBJS>kernel_cfg.$(OBJEXT) kernel_mem2.$(OBJEXT) $(CFG2_COBJS)</CFG2_COBJS>
                <CFG2_ASMOBJS>$(CFG2_ASMOBJS)</CFG2_ASMOBJS>
                        
                <CFG3_OUT_SRCS>kernel_cfg.h kernel_cfg.c kernel_mem3.c $(CFG3_OUT_SRCS)</CFG3_OUT_SRCS>
                <CFG3_COBJS>kernel_cfg.$(OBJEXT) kernel_mem3.$(OBJEXT) $(CFG3_COBJS)</CFG3_COBJS>
                <CFG3_ASMOBJS>$(CFG3_ASMOBJS)</CFG3_ASMOBJS>
                
                <!-- kernel app build obj -->
                <ALL_CFG_COBJS>kernel_cfg.$(OBJEXT) kernel_mem.$(OBJEXT) kernel_mem2.$(OBJEXT) kernel_mem3.$(OBJEXT) cfg1_out.$(OBJEXT)</ALL_CFG_COBJS>
                <!-- Configurator Rules -->
                <!-- <ALL_CFG_COBJS>$(sort $(CFG_COBJS) $(CFG2_COBJS) $(CFG3_COBJS) cfg1_out.$(OBJEXT))</ALL_CFG_COBJS> -->
                <ALL_CFG_COBJS>$(CFG_COBJS) $(CFG2_COBJS) $(CFG3_COBJS) cfg1_out.$(OBJEXT)</ALL_CFG_COBJS>
                <!-- <ALL_CFG_ASMOBJS>$(sort $(CFG_ASMOBJS) $(CFG2_ASMOBJS) $(CFG3_ASMOBJS))</ALL_CFG_ASMOBJS> -->
                <ALL_CFG_ASMOBJS>$(CFG_ASMOBJS) $(CFG2_ASMOBJS) $(CFG3_ASMOBJS)</ALL_CFG_ASMOBJS>
                
                <CFG1_OUT_LDSCRIPT></CFG1_OUT_LDSCRIPT>
                <CFG2_OUT_LDSCRIPT></CFG2_OUT_LDSCRIPT>
                <CFG3_OUT_LDSCRIPT></CFG3_OUT_LDSCRIPT>
                <LDSCRIPT></LDSCRIPT>
                <CLEAN_FILES>$(CLEAN_FILES) $(CFG2_OUT_LDSCRIPT) $(CFG3_OUT_LDSCRIPT) $(LDSCRIPT)</CLEAN_FILES>
                
                <USE_CFG_PASS3>true</USE_CFG_PASS3>
                
                <!-- FMP + Zynq -->
                <CFG_KERNEL_TABS>--api-table=$(KERNELDIR)/kernel_api.csv --cfg1-def-table=$(KERNELDIR)/kernel_def.csv --cfg1-def-table=$(SRCDIR)/arch/arm_gcc/mpcore/chip_def.csv --cfg1-def-table=$(SRCDIR)/arch/arm_gcc/common/core_def.csv</CFG_KERNEL_TABS>
            </PropertyGroup>
        </When>
        <When Condition=" '$(TOPPERS_MODULES)'=='gr-peach' and '$(TOPPERS_OSTYPE)'=='asp' ">
            <PropertyGroup>
                <!-- Toppers ASP + GR-PEACH -->
                <APPNAME>sample1</APPNAME>
                <CFGINCLUDE             Condition="'$(CFGINCLUDE)'==''">-I$(SRCDIR) -I$(SRCDIR)/arch -I$(SRCDIR)/include -I$(KERNELDIR) -I$(SRCDIR)/arch/arm_gcc/rza1 -I$(SRCDIR)/arch/arm_gcc/common -I$(TARGETDIR)</CFGINCLUDE>
                <CFG1COMPILEINCLUDE     Condition="'$(CFG1COMPILEINCLUDE)'==''">-I$(SRCDIR) -I$(SRCDIR)/arch -I$(SRCDIR)/include -I$(KERNELDIR) -I$(SRCDIR)/arch/arm_gcc/rza1 -I$(SRCDIR)/arch/arm_gcc/common -I$(TARGETDIR) -I$(SPOCLIENT)/$(Directory)</CFG1COMPILEINCLUDE>
                <APPLNAME               Condition="'$(APPLNAME)'==''">$(SPOCLIENT)/$(Directory)/$(APPNAME)</APPLNAME>
                <APPL_CFG>$(APPLNAME).cfg</APPL_CFG>
                <APPL_CDL>$(APPLNAME).cdl</APPL_CDL>
                <APPL_ASMOBJS />
                
                <SYSSVC_COBJS>$(SYSSVC_COBJS) banner.$(OBJEXT) syslog.$(OBJEXT) serial.$(OBJEXT) logtask.$(OBJEXT) $(CXXRTS)</SYSSVC_COBJS>
                <SYSSVC_COBJS>$(SYSSVC_COBJS) strerror.$(OBJEXT) vasyslog.$(OBJEXT)</SYSSVC_COBJS>
                
                <!-- start -->
                <!-- ld file set -->
                <TOPPERS_START_OBJS></TOPPERS_START_OBJS>
                <!-- helloev3 -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) sample1.$(OBJEXT)</TOPPERS_APPL_OBJS>
                <!-- appl objs -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) log_output.$(OBJEXT) t_perror.$(OBJEXT) </TOPPERS_APPL_OBJS>
                <!-- ev3 drivers -->
                <TOPPERS_DRIVER_OBJS></TOPPERS_DRIVER_OBJS>
                
                <!-- http://stackoverflow.com/questions/24881/how-do-i-fix-for-loop-initial-declaration-used-outside-c99-mode-gcc-error -->
                <!-- Toppers Custom -->
                <CTOPPERS_CUSTOM_WARNING_OFF_FLAGS>-Wimplicit-function-declaration</CTOPPERS_CUSTOM_WARNING_OFF_FLAGS>
                <CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS></CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS>
                <CTOPPERS_CUSTOM_FLAGS>-g -std=gnu99 $(AS_CC_CPP_COMMON_FLAGS) -DCONFIG_FB_DEFERRED_IO -D__KERNEL__ -DSUPPORT_XLOG_SYS -Dgcc -DALLFUNC -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM $(CTOPPERS_CUSTOM_WARNING_OFF_FLAGS)</CTOPPERS_CUSTOM_FLAGS>
                <!-- GR-PEACH -->
                <CXXTOPPERS_CUSTOM_FLAGS>$(CC_CPP_COMMON_FLAGS) $(AS_CC_CPP_COMMON_FLAGS) -DCONFIG_FB_DEFERRED_IO -D__KERNEL__ -DSUPPORT_XLOG_SYS -Dgcc -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM $(CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS)</CXXTOPPERS_CUSTOM_FLAGS>
                <ASMTOPPERS_CUSTOM_FLAGS>-g -mlittle-endian -nostdlib -O2 -Wall -DTOPPERS_LABEL_ASM -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM -I$(SRCDIR)/kernel -DALLFUNC -fno-strict-aliasing</ASMTOPPERS_CUSTOM_FLAGS>
                
                <!-- gr_peach_gcc\Makefile.target -->
                <!-- use ld file -->
                <TEXT_START_ADDRESS></TEXT_START_ADDRESS>
                <DATA_START_ADDRESS></DATA_START_ADDRESS>
                
                <!-- cfg parameter -->
                <CFG_COBJS>$(CFG_COBJS) $(CFG1_OUT).$(OBJEXT)</CFG_COBJS>
                <CFG_ASMOBJS>$(CFG_ASMOBJS)</CFG_ASMOBJS>
                
                <CFG2_OUT_SRCS>kernel_cfg.h kernel_cfg.c kernel_mem2.c $(CFG2_OUT_SRCS)</CFG2_OUT_SRCS>
                <CFG2_COBJS>kernel_cfg.$(OBJEXT) kernel_mem2.$(OBJEXT) $(CFG2_COBJS)</CFG2_COBJS>
                <CFG2_ASMOBJS>$(CFG2_ASMOBJS)</CFG2_ASMOBJS>
                        
                <CFG3_OUT_SRCS>kernel_cfg.h kernel_cfg.c kernel_mem3.c $(CFG3_OUT_SRCS)</CFG3_OUT_SRCS>
                <CFG3_COBJS>kernel_cfg.$(OBJEXT) kernel_mem3.$(OBJEXT) $(CFG3_COBJS)</CFG3_COBJS>
                <CFG3_ASMOBJS>$(CFG3_ASMOBJS)</CFG3_ASMOBJS>
                
                <!-- kernel app build obj -->
                <ALL_CFG_COBJS>kernel_cfg.$(OBJEXT) kernel_mem.$(OBJEXT) kernel_mem2.$(OBJEXT) kernel_mem3.$(OBJEXT) cfg1_out.$(OBJEXT)</ALL_CFG_COBJS>
                <!-- Configurator Rules -->
                <!-- <ALL_CFG_COBJS>$(sort $(CFG_COBJS) $(CFG2_COBJS) $(CFG3_COBJS) cfg1_out.$(OBJEXT))</ALL_CFG_COBJS> -->
                <ALL_CFG_COBJS>$(CFG_COBJS) $(CFG2_COBJS) $(CFG3_COBJS) cfg1_out.$(OBJEXT)</ALL_CFG_COBJS>
                <!-- <ALL_CFG_ASMOBJS>$(sort $(CFG_ASMOBJS) $(CFG2_ASMOBJS) $(CFG3_ASMOBJS))</ALL_CFG_ASMOBJS> -->
                <ALL_CFG_ASMOBJS>$(CFG_ASMOBJS) $(CFG2_ASMOBJS) $(CFG3_ASMOBJS)</ALL_CFG_ASMOBJS>

                <CFG1_OUT_TARGETFILE></CFG1_OUT_TARGETFILE>
                <CFG2_OUT_TARGETFILE>$(TARGETDIR)/target.tf</CFG2_OUT_TARGETFILE>
                <CFG3_OUT_TARGETFILE>$(TARGETDIR)/target_check.tf</CFG3_OUT_TARGETFILE>
                <CFG4_OUT_TARGETFILE></CFG4_OUT_TARGETFILE>
                
                <!-- rom -->
                <CFG1_OUT_LDSCRIPT>$(SRCDIR)/target/$(TARGETNAME)/gr_peach_rom.ld</CFG1_OUT_LDSCRIPT>
                <CFG2_OUT_LDSCRIPT>$(SRCDIR)/target/$(TARGETNAME)/gr_peach_rom.ld</CFG2_OUT_LDSCRIPT>
                <CFG3_OUT_LDSCRIPT>$(SRCDIR)/target/$(TARGETNAME)/gr_peach_rom.ld</CFG3_OUT_LDSCRIPT>
                <LDSCRIPT>$(SRCDIR)/target/$(TARGETNAME)/gr_peach_rom.ld</LDSCRIPT>
                
                <!-- chip_support.$(OBJEXT) -->
                <KERNEL_ASMOBJS>$(KERNEL_ASMOBJS) core_support.$(OBJEXT)</KERNEL_ASMOBJS>
                <KERNEL_ASMOBJS>$(KERNEL_ASMOBJS) gic_support.$(OBJEXT)</KERNEL_ASMOBJS>
                <KERNEL_ASMOBJS>$(KERNEL_ASMOBJS) target_support.$(OBJEXT)</KERNEL_ASMOBJS>
                
                <!-- kernel common -->
                <KERNEL_COBJS>alarm.$(OBJEXT) cyclic.$(OBJEXT) dataqueue.$(OBJEXT) eventflag.$(OBJEXT) exception.$(OBJEXT) interrupt.$(OBJEXT) mempfix.$(OBJEXT) pridataq.$(OBJEXT) semaphore.$(OBJEXT) startup.$(OBJEXT) sys_manage.$(OBJEXT) task.$(OBJEXT) task_except.$(OBJEXT) task_manage.$(OBJEXT) task_refer.$(OBJEXT) task_sync.$(OBJEXT) time_event.$(OBJEXT) time_manage.$(OBJEXT) wait.$(OBJEXT)</KERNEL_COBJS>
                <!-- kernel target(rza1)[chip_serial.$(OBJEXT)] -->
                <KERNEL_COBJS>$(KERNEL_COBJS) arm.$(OBJEXT) chip_serial.$(OBJEXT) core_config.$(OBJEXT) scif.$(OBJEXT) pl310.$(OBJEXT) sf_boot.$(OBJEXT) gic.$(OBJEXT) chip_config.$(OBJEXT) chip_timer.$(OBJEXT) target_config.$(OBJEXT)</KERNEL_COBJS>
                <KERNEL_CFLAGS>$(KERNEL_CFLAGS) -I$(SRCDIR)/kernel</KERNEL_CFLAGS>
                <APPL_COBJS>$(APPL_COBJS) log_output.$(OBJEXT) t_perror.$(OBJEXT)</APPL_COBJS>
                <APPL_CFLAGS />
                <APPL_LIBS>$(APPL_LIBS)</APPL_LIBS>
                
                <!-- Compiler Various Defines -->
                <KERNEL_LIB_OBJS>$(KERNEL_ASMOBJS) $(KERNEL_COBJS)</KERNEL_LIB_OBJS>
                
                <USE_CFG_PASS3>false</USE_CFG_PASS3>
                
                <!-- ASP + GR_PEACH -->
                <CFG_KERNEL_TABS>--api-table=$(KERNELDIR)/kernel_api.csv --cfg1-def-table=$(KERNELDIR)/kernel_def.csv --cfg1-def-table=$(SRCDIR)/arch/arm_gcc/common/core_def.csv </CFG_KERNEL_TABS>
            </PropertyGroup>
        </When>
        <When Condition=" '$(TOPPERS_MODULES)'=='gr-peach' and '$(TOPPERS_OSTYPE)'=='asp3' ">
            <PropertyGroup>
                <!-- Toppers ASP3 + GR-PEACH -->
                <!-- base ASP 3.2.0 -->
                <APPNAME>sample1</APPNAME>
                <CFGINCLUDE             Condition="'$(CFGINCLUDE)'==''">-I$(SRCDIR) -I$(SRCDIR)/arch -I$(SRCDIR)/include -I$(KERNELDIR) -I$(SRCDIR)/arch/arm_gcc/rza1 -I$(SRCDIR)/arch/arm_gcc/common -I$(TARGETDIR)</CFGINCLUDE>
                <CFG1COMPILEINCLUDE     Condition="'$(CFG1COMPILEINCLUDE)'==''">-I$(SRCDIR) -I$(SRCDIR)/arch -I$(SRCDIR)/include -I$(KERNELDIR) -I$(SRCDIR)/arch/arm_gcc/rza1 -I$(SRCDIR)/arch/arm_gcc/common -I$(TARGETDIR) -I$(SPOCLIENT)/$(Directory)</CFG1COMPILEINCLUDE>
                <APPLNAME               Condition="'$(APPLNAME)'==''">$(SPOCLIENT)/$(Directory)/$(APPNAME)</APPLNAME>
                <APPL_CFG>$(APPLNAME).cfg</APPL_CFG>
                <APPL_CDL>$(APPLNAME).cdl</APPL_CDL>
                <APPL_ASMOBJS />
                
                <SYSSVC_COBJS>$(SYSSVC_COBJS) banner.$(OBJEXT) syslog.$(OBJEXT) serial.$(OBJEXT) logtask.$(OBJEXT) $(CXXRTS)</SYSSVC_COBJS>
                <SYSSVC_COBJS>$(SYSSVC_COBJS) strerror.$(OBJEXT) vasyslog.$(OBJEXT)</SYSSVC_COBJS>
                
                <!-- start -->
                <!-- ld file set -->
                <TOPPERS_START_OBJS></TOPPERS_START_OBJS>
                <!-- helloev3 -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) sample1.$(OBJEXT)</TOPPERS_APPL_OBJS>
                <!-- appl objs -->
                <TOPPERS_APPL_OBJS>$(TOPPERS_APPL_OBJS) log_output.$(OBJEXT) t_perror.$(OBJEXT) </TOPPERS_APPL_OBJS>
                <!-- ev3 drivers -->
                <TOPPERS_DRIVER_OBJS></TOPPERS_DRIVER_OBJS>
                
                <!-- http://stackoverflow.com/questions/24881/how-do-i-fix-for-loop-initial-declaration-used-outside-c99-mode-gcc-error -->
                <!-- Toppers Custom -->
                <CTOPPERS_CUSTOM_WARNING_OFF_FLAGS>-Wimplicit-function-declaration</CTOPPERS_CUSTOM_WARNING_OFF_FLAGS>
                <CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS></CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS>
                <CTOPPERS_CUSTOM_FLAGS>-g -std=gnu99 $(AS_CC_CPP_COMMON_FLAGS) -DCONFIG_FB_DEFERRED_IO -D__KERNEL__ -DSUPPORT_XLOG_SYS -Dgcc -DALLFUNC -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM $(CTOPPERS_CUSTOM_WARNING_OFF_FLAGS)</CTOPPERS_CUSTOM_FLAGS>
                <!-- GR-PEACH -->
                <CXXTOPPERS_CUSTOM_FLAGS>$(CC_CPP_COMMON_FLAGS) $(AS_CC_CPP_COMMON_FLAGS) -DCONFIG_FB_DEFERRED_IO -D__KERNEL__ -DSUPPORT_XLOG_SYS -Dgcc -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM $(CXXTOPPERS_CUSTOM_WARNING_OFF_FLAGS)</CXXTOPPERS_CUSTOM_FLAGS>
                <ASMTOPPERS_CUSTOM_FLAGS>-g -mlittle-endian -nostdlib -O2 -Wall -DTOPPERS_LABEL_ASM -D__TARGET_ARCH_ARM=7 -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT -DTOPPERS_RZA1H -DTOPPERS_EXECUTE_ON_ROM -I$(SRCDIR)/kernel -DALLFUNC -fno-strict-aliasing</ASMTOPPERS_CUSTOM_FLAGS>
                
                <!-- gr_peach_gcc\Makefile.target -->
                <!-- use ld file -->
                <TEXT_START_ADDRESS></TEXT_START_ADDRESS>
                <DATA_START_ADDRESS></DATA_START_ADDRESS>
                
                <!-- cfg parameter -->
                <CFG_COBJS>$(CFG_COBJS) $(CFG1_OUT).$(OBJEXT)</CFG_COBJS>
                <CFG_ASMOBJS>$(CFG_ASMOBJS)</CFG_ASMOBJS>
                
                <CFG2_OUT_SRCS>kernel_cfg.h kernel_cfg.c kernel_mem2.c $(CFG2_OUT_SRCS)</CFG2_OUT_SRCS>
                <CFG2_COBJS>kernel_cfg.$(OBJEXT) kernel_mem2.$(OBJEXT) $(CFG2_COBJS)</CFG2_COBJS>
                <CFG2_ASMOBJS>$(CFG2_ASMOBJS)</CFG2_ASMOBJS>
                        
                <CFG3_OUT_SRCS>kernel_cfg.h kernel_cfg.c kernel_mem3.c $(CFG3_OUT_SRCS)</CFG3_OUT_SRCS>
                <CFG3_COBJS>kernel_cfg.$(OBJEXT) kernel_mem3.$(OBJEXT) $(CFG3_COBJS)</CFG3_COBJS>
                <CFG3_ASMOBJS>$(CFG3_ASMOBJS)</CFG3_ASMOBJS>
                
                <!-- kernel app build obj -->
                <ALL_CFG_COBJS>kernel_cfg.$(OBJEXT) kernel_mem.$(OBJEXT) kernel_mem2.$(OBJEXT) kernel_mem3.$(OBJEXT) cfg1_out.$(OBJEXT)</ALL_CFG_COBJS>
                <!-- Configurator Rules -->
                <!-- <ALL_CFG_COBJS>$(sort $(CFG_COBJS) $(CFG2_COBJS) $(CFG3_COBJS) cfg1_out.$(OBJEXT))</ALL_CFG_COBJS> -->
                <ALL_CFG_COBJS>$(CFG_COBJS) $(CFG2_COBJS) $(CFG3_COBJS) cfg1_out.$(OBJEXT)</ALL_CFG_COBJS>
                <!-- <ALL_CFG_ASMOBJS>$(sort $(CFG_ASMOBJS) $(CFG2_ASMOBJS) $(CFG3_ASMOBJS))</ALL_CFG_ASMOBJS> -->
                <ALL_CFG_ASMOBJS>$(CFG_ASMOBJS) $(CFG2_ASMOBJS) $(CFG3_ASMOBJS)</ALL_CFG_ASMOBJS>
                
                <CFG1_OUT_TARGETFILE></CFG1_OUT_TARGETFILE>
                <CFG2_OUT_TARGETFILE>$(TARGETDIR)/target.tf</CFG2_OUT_TARGETFILE>
                <CFG3_OUT_TARGETFILE>$(TARGETDIR)/target_check.tf</CFG3_OUT_TARGETFILE>
                <CFG4_OUT_TARGETFILE></CFG4_OUT_TARGETFILE>
                
                <!-- rom -->
                <CFG1_OUT_LDSCRIPT>$(SRCDIR)/target/$(TARGETNAME)/gr_peach_rom.ld</CFG1_OUT_LDSCRIPT>
                <CFG2_OUT_LDSCRIPT>$(SRCDIR)/target/$(TARGETNAME)/gr_peach_rom.ld</CFG2_OUT_LDSCRIPT>
                <CFG3_OUT_LDSCRIPT>$(SRCDIR)/target/$(TARGETNAME)/gr_peach_rom.ld</CFG3_OUT_LDSCRIPT>
                <LDSCRIPT>$(SRCDIR)/target/$(TARGETNAME)/gr_peach_rom.ld</LDSCRIPT>
                
                <!-- chip_support.$(OBJEXT) -->
                <KERNEL_ASMOBJS>$(KERNEL_ASMOBJS) core_support.$(OBJEXT)</KERNEL_ASMOBJS>
                <KERNEL_ASMOBJS>$(KERNEL_ASMOBJS) gic_support.$(OBJEXT)</KERNEL_ASMOBJS>
                <KERNEL_ASMOBJS>$(KERNEL_ASMOBJS) target_support.$(OBJEXT)</KERNEL_ASMOBJS>
                
                <!-- kernel common -->
                <KERNEL_COBJS>alarm.$(OBJEXT) cyclic.$(OBJEXT) dataqueue.$(OBJEXT) eventflag.$(OBJEXT) exception.$(OBJEXT) interrupt.$(OBJEXT) mempfix.$(OBJEXT) pridataq.$(OBJEXT) semaphore.$(OBJEXT) startup.$(OBJEXT) sys_manage.$(OBJEXT) task.$(OBJEXT) task_except.$(OBJEXT) task_manage.$(OBJEXT) task_refer.$(OBJEXT) task_sync.$(OBJEXT) time_event.$(OBJEXT) time_manage.$(OBJEXT) wait.$(OBJEXT)</KERNEL_COBJS>
                <!-- kernel target(rza1)[chip_serial.$(OBJEXT)] -->
                <KERNEL_COBJS>$(KERNEL_COBJS) arm.$(OBJEXT) chip_serial.$(OBJEXT) core_config.$(OBJEXT) scif.$(OBJEXT) pl310.$(OBJEXT) sf_boot.$(OBJEXT) gic.$(OBJEXT) chip_config.$(OBJEXT) chip_timer.$(OBJEXT) target_config.$(OBJEXT)</KERNEL_COBJS>
                <KERNEL_CFLAGS>$(KERNEL_CFLAGS) -I$(SRCDIR)/kernel</KERNEL_CFLAGS>
                <APPL_COBJS>$(APPL_COBJS) log_output.$(OBJEXT) t_perror.$(OBJEXT)</APPL_COBJS>
                <APPL_CFLAGS />
                <APPL_LIBS>$(APPL_LIBS)</APPL_LIBS>
                
                <!-- Compiler Various Defines -->
                <KERNEL_LIB_OBJS>$(KERNEL_ASMOBJS) $(KERNEL_COBJS)</KERNEL_LIB_OBJS>
                
                <USE_CFG_PASS3>false</USE_CFG_PASS3>
                
                <!-- ASP + GR_PEACH -->
                <CFG_KERNEL_TABS>--api-table=$(KERNELDIR)/kernel_api.csv --cfg1-def-table=$(KERNELDIR)/kernel_def.csv --cfg1-def-table=$(SRCDIR)/arch/arm_gcc/common/core_def.csv </CFG_KERNEL_TABS>
            </PropertyGroup>
        </When>
    </Choose>
    
    <!-- tecs -->
    <PropertyGroup>
        <PRE_TECSGEN_TARGET     Condition="'$(PRE_TECSGEN_TARGET)'==''" ></PRE_TECSGEN_TARGET>
        <POST_TECSGEN_TARGET    Condition="'$(POST_TECSGEN_TARGET)'==''"></POST_TECSGEN_TARGET>
        <!-- Kernel Defines -->
        <KERNEL_DIR>$(KERNEL_DIR) $(SRCDIR)/tecs_kernel</KERNEL_DIR>
    </PropertyGroup>
    
    <Choose>
        <When Condition=" '$(USE_CXX)'!='' ">
            <PropertyGroup>
                <APPL_CXXOBJS />
                <!-- <APPL_COBJS>$(TECS_COBJS) tecs_init.$(OBJEXT)</APPL_COBJS> -->
            </PropertyGroup>
        </When>
        <When Condition=" '$(USE_CXX)'=='' ">
            <PropertyGroup>
                <!-- <APPL_COBJS>$(TECS_COBJS) tecs_init.$(OBJEXT)</APPL_COBJS> -->
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition=" '$(APPLDIR)'!='' ">
            <PropertyGroup>
                <!-- foreach -->
                <!-- <INCLUDES>$(INCLUDES) -I$(APPLDIR)/../common $(foreach dir, $(APPLDIR), -I$(dir))</INCLUDES> -->
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition=" '$(OMIT_MAKEOFFSET)'!='' ">
            <PropertyGroup>
                <OFFSET_H />
            </PropertyGroup>
        </When>
        <When Condition=" '$(OMIT_MAKEOFFSET)'=='' ">
            <PropertyGroup>
                <OFFSET_H>offset.h</OFFSET_H>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition=" '$(OFFSET_TF)'=='' ">
            <PropertyGroup>
                <KERNEL_AUX_COBJS>$(KERNEL_AUX_COBJS) makeoffset.$(OBJEXT)</KERNEL_AUX_COBJS>
            </PropertyGroup>
        </When>
    </Choose>

    <!-- Link objecct setting -->
    <Choose>
        <When Condition=" '$(KERNEL_LIB)'!='' ">
            <PropertyGroup>
                <ALL_LIBS>$(APPL_LIBS) $(SYSSVC_LIBS) -lkernel $(LIBS)</ALL_LIBS>
                <!-- <LIBS_DEP>$(filter %.a, $(ALL_LIBS)) $(KERNEL_LIB)/libkernel.a</LIBS_DEP> -->
                <LIBS_DEP>$(KERNEL_LIB)/libkernel.a</LIBS_DEP>
                <LDFLAGS>$(LDFLAGS) -L$(KERNEL_LIB)</LDFLAGS>
                <CFG2_OUT_LDFLAGS>$(CFG2_OUT_LDFLAGS) -L$(KERNEL_LIB)</CFG2_OUT_LDFLAGS>
                <CFG3_OUT_LDFLAGS>$(CFG3_OUT_LDFLAGS) -L$(KERNEL_LIB)</CFG3_OUT_LDFLAGS>
                <REALCLEAN_FILES>libkernel.a $(REALCLEAN_FILES)</REALCLEAN_FILES>
            </PropertyGroup>
        </When>
        <When Condition=" '$(KERNEL_LIB)'=='' ">
            <PropertyGroup>
                <ALL_LIBS>$(APPL_LIBS) $(SYSSVC_LIBS) libkernel.a $(LIBS)</ALL_LIBS>
                <!-- <LIBS_DEP>$(filter %.a,$(ALL_LIBS))</LIBS_DEP> -->
            </PropertyGroup>
        </When>
    </Choose>

    <!-- Shared Compiler Option defines -->
    <Choose>
        <When Condition=" '$(TEXT_START_ADDRESS)'!='' ">
            <PropertyGroup>
                <LDFLAGS>$(LDFLAGS) -Wl,-Ttext,$(TEXT_START_ADDRESS)</LDFLAGS>
                <CFG1_OUT_LDFLAGS>$(CFG1_OUT_LDFLAGS) -Wl,-Ttext,$(TEXT_START_ADDRESS)</CFG1_OUT_LDFLAGS>
                <CFG2_OUT_LDFLAGS>$(CFG2_OUT_LDFLAGS) -Wl,-Ttext,$(TEXT_START_ADDRESS)</CFG2_OUT_LDFLAGS>
                <CFG3_OUT_LDFLAGS>$(CFG3_OUT_LDFLAGS) -Wl,-Ttext,$(TEXT_START_ADDRESS)</CFG3_OUT_LDFLAGS>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition=" '$(DATA_START_ADDRESS)'!='' ">
            <PropertyGroup>
                <LDFLAGS>$(LDFLAGS) -Wl,-Tdata,$(DATA_START_ADDRESS)</LDFLAGS>
                <CFG1_OUT_LDFLAGS>$(CFG1_OUT_LDFLAGS) -Wl,-Tdata,$(DATA_START_ADDRESS)</CFG1_OUT_LDFLAGS>
                <CFG2_OUT_LDFLAGS>$(CFG2_OUT_LDFLAGS) -Wl,-Tdata,$(DATA_START_ADDRESS)</CFG2_OUT_LDFLAGS>
                <CFG3_OUT_LDFLAGS>$(CFG3_OUT_LDFLAGS) -Wl,-Tdata,$(DATA_START_ADDRESS)</CFG3_OUT_LDFLAGS>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition="'$(OMIT_DEBUG_INFO)'!='' ">
            <PropertyGroup>
                <COPTS>$(COPTS) -g</COPTS>
            </PropertyGroup>
        </When>
    </Choose>
    
    <Choose>
        <When Condition="'$(OMIT_WARNING_ALL)'!='' ">
            <PropertyGroup>
                <COPTS>$(COPTS) -Wall</COPTS>
            </PropertyGroup>
        </When>
    </Choose>
    
    <Choose>
        <When Condition="'$(OMIT_OPTIMIZATION)'!='' ">
            <PropertyGroup>
                <COPTS>$(COPTS) -O2</COPTS>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition=" '$(CFG1_OUT_LDSCRIPT)'!='' ">
            <PropertyGroup>
                <CFG1_OUT_LDFLAGS>$(CFG1_OUT_LDFLAGS) -T $(CFG1_OUT_LDSCRIPT)</CFG1_OUT_LDFLAGS>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition=" '$(CFG2_OUT_LDSCRIPT)'!='' ">
            <PropertyGroup>
                <CFG2_OUT_LDFLAGS>$(CFG2_OUT_LDFLAGS) -T $(CFG2_OUT_LDSCRIPT)</CFG2_OUT_LDFLAGS>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition=" '$(CFG3_OUT_LDSCRIPT)'!='' ">
            <PropertyGroup>
                <CFG3_OUT_LDFLAGS>$(CFG3_OUT_LDFLAGS) -T $(CFG3_OUT_LDSCRIPT)</CFG3_OUT_LDFLAGS>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition=" '$(LDSCRIPT)'!='' ">
            <PropertyGroup>
                <LDFLAGS>$(LDFLAGS) -T $(LDSCRIPT)</LDFLAGS>
            </PropertyGroup>
        </When>
    </Choose>

<!-- offset file create rules -->
<!-- 
<Choose>
    <When Condition=" '$(OFFSET_TF)'!='' ">
        offset.h: $(APPL_CFG) kernel_cfg.timestamp
        <Exec Command="$(call print_cmd, "CFG[3]", $@) "/>
        <Exec Command="@$(CFG) ?-pass 3 ?-kernel hrp2 $(INCLUDES) ?-rom-image cfg1_out.srec ?-symbol-table cfg1_out.syms -T $(OFFSET_TF) $(CFG_TABS) $(APPL_CFG) kernel_cfg.timestamp "/>
    </When>
    <When Condition=" '$(OFFSET_TF)'=='' ">
        offset.h: makeoffset.s $(SRCDIR)/utils/genoffset
        <Exec Command="$(PERL) $(SRCDIR)/utils/genoffset makeoffset.s > offset.h "/>
    </When>
</Choose>
-->

    <!-- NoEdit Zone -->
    <!-- Environment Depend compiler options -->
    <Choose>
        <When Condition=" '$(DBGENV)'!='' ">
            <PropertyGroup>
                <CDEFS>$(CDEFS) -D$(DBGENV)</CDEFS>
            </PropertyGroup>
        </When>
    </Choose>

    <!-- Kernel File Structure Defines -->
    <Choose>
        <When Condition=" '$(KERNEL_FUNCOBJS)'!='' ">
            <PropertyGroup>
                <KERNEL_LCSRCS>$(KERNEL_FCSRCS)</KERNEL_LCSRCS>
                <KERNEL_LCOBJS>$(foreach file,$(KERNEL_FCSRCS),$($(file:.c=)))</KERNEL_LCOBJS>
            </PropertyGroup>
        </When>
        <When Condition=" '$(KERNEL_FUNCOBJS)'=='' ">
            <PropertyGroup>
                <KERNEL_CFLAGS>-DALLFUNC $(KERNEL_CFLAGS)</KERNEL_CFLAGS>
                <!-- <KERNEL_COBJS>$(KERNEL_COBJS) $(foreach file, $(KERNEL_FCSRCS),$(file:.c=.$(OBJEXT)))</KERNEL_COBJS> -->
            </PropertyGroup>
        </When>
    </Choose>

    <!-- Syslog Relation Defines -->
    <Choose>
        <When Condition=" '$(USE_SYSLOG)'!='' ">
            <PropertyGroup>
                <APPL_COBJS>$(APPL_COBJS) vasyslog.$(OBJEXT)</APPL_COBJS>
            </PropertyGroup>
        </When>
        <When Condition=" '$(USE_SYSLOG)'=='' ">
            <PropertyGroup>
                <COPTS>$(COPTS) -D TOPPERS_OMIT_SYSLOG</COPTS>
            </PropertyGroup>
        </When>
    </Choose>
    
    <!-- set total param -->
    <PropertyGroup>
        <!-- Compile Rule Defines -->
        <CFG_OBJS>$(CFG_ASMOBJS) $(CFG_COBJS)</CFG_OBJS>
        <CFG2_OBJS>$(CFG2_ASMOBJS) $(CFG2_COBJS)</CFG2_OBJS>
        <CFG3_OBJS>$(CFG3_ASMOBJS) $(CFG3_COBJS)</CFG3_OBJS>
        <ALL_CFG_OBJS>$(ALL_CFG_ASMOBJS) $(ALL_CFG_COBJS)</ALL_CFG_OBJS>
        <SYSSVC_OBJS>$(SYSSVC_ASMOBJS) $(SYSSVC_COBJS)</SYSSVC_OBJS>
        <APPL_OBJS>$(APPL_ASMOBJS) $(APPL_COBJS) $(APPL_CXXOBJS)</APPL_OBJS>
        <APPL2_OBJS>$(START_OBJS) $(APPL_OBJS) $(SYSSVC_OBJS) $(CFG2_OBJS) $(END_OBJS) $(HIDDEN_OBJS)</APPL2_OBJS>
        <APPL3_OBJS>$(START_OBJS) $(APPL_OBJS) $(SYSSVC_OBJS) $(CFG3_OBJS) $(END_OBJS) $(HIDDEN_OBJS)</APPL3_OBJS>
        <ALL_OBJS>$(START_OBJS) $(APPL_OBJS) $(SYSSVC_OBJS) $(CFG_OBJS) $(END_OBJS) $(HIDDEN_OBJS)</ALL_OBJS>
        <CFG_CFLAGS>$(APPL_CFLAGS) $(SYSSVC_CFLAGS) $(KERNEL_CFLAGS)</CFG_CFLAGS>
        <KERNEL_ALL_COBJS>$(KERNEL_COBJS) $(KERNEL_AUX_COBJS)</KERNEL_ALL_COBJS>
    </PropertyGroup>

    <Import Project="$(SPOCLIENT)/ReleaseInfo.settings"/>

    <PropertyGroup>
        <ProjectFile>$(MSBuildProjectName)$(MSBuildProjectExtension)</ProjectFile>

    <!--
    Optional settings/overrides: (true/false)

    timewarp      - Enabled the timewarp feature
    profile       - creates a profile build
    sampleprof    - enables build with sampling profile support
    latencyprof   - enables build with latency profile support

    Set the defaults for these if they haven't been explicitly set:
    -->
        <timewarp Condition="'$(timewarp)'==''"         >false</timewarp>
        <profile Condition="'$(profile)'==''"           >false</profile>
        <sampleprof Condition="'$(sampleprof)'==''"     >false</sampleprof>
        <latencyprof Condition="'$(latencyprof)'==''"   >false</latencyprof>
        <FLAVOR Condition="'$(FLAVOR)'==''"             >Debug</FLAVOR>
        <MEMORY Condition="'$(MEMORY)'==''"             >FLASH</MEMORY>
        <ENABLE_FASTCOMPILE Condition="'$(ENABLE_FASTCOMPILE)'==''"   >true</ENABLE_FASTCOMPILE>
        <FourByteCrytoLib>false</FourByteCrytoLib>
        <CLEAN_INDEPENDENT_ONLY Condition="'$(CLEAN_INDEPENDENT_ONLY)'==''"></CLEAN_INDEPENDENT_ONLY>
        <Configuration Condition="'$(Configuration)'=='' And '$(FLAVOR)'=='Debug'"       >$(FLAVOR)</Configuration>
        <Configuration Condition="'$(Configuration)'=='' And '$(FLAVOR)'=='Instrumented'">Debug</Configuration>
        <Configuration Condition="'$(Configuration)'=='' ">Release</Configuration>
    </PropertyGroup>


    <!-- set up platform dependant properties, also setup the TARGETPLATFORM as capitals for set up PLATFORM_ARM_XXX flag -->

    <!--  platform dependent properties are included here, based on teh path right above -->
    <!--  the settigns file is required to be have a specifc name ! -->
    <Import Project="$(MFSettingsFile)"                                       Condition=" EXISTS('$(MFSettingsFile)')"/>
    <!-- -->
    <Import Project="$(MSBuildStartupDirectory)/$(PLATFORM).settings"         Condition="!EXISTS('$(MFSettingsFile)') AND  EXISTS('$(MSBuildStartupDirectory)/$(PLATFORM).settings')"/>
    <Import Project="$(SPOCLIENT)/Solutions/$(PLATFORM)/$(PLATFORM).settings" Condition="!EXISTS('$(MFSettingsFile)') AND !EXISTS('$(MSBuildStartupDirectory)/$(PLATFORM).settings') AND EXISTS('$(SPOCLIENT)/Solutions/$(PLATFORM)/$(PLATFORM).settings')"/>

    <!--  <Import Project="Error: INSTRUCTION_SET is not defined" Condition="'$(INSTRUCTION_SET)'==''"/> -->
    <!-- -->
    <PropertyGroup>
        <!-- has to change the MEMORY property to Capital letters for TARGETLOCATION_XXX-->
        <TARGETLOCATION Condition="'$(MEMORY)'=='FLASH'">FLASH</TARGETLOCATION>
        <TARGETLOCATION Condition="'$(MEMORY)'=='RAM'">RAM</TARGETLOCATION>
    </PropertyGroup>

    <PropertyGroup>
        <!-- We explictly push the above three in recursive invocations; this makes such invocations
             less sensitive to where the include of this rules file appears -->

        <SPO_SDK Condition="'$(SPO_SDK)'==''">$(SPOCLIENT)</SPO_SDK>
        <SPO_BUILD Condition="'$(SPO_BUILD)'==''">$(BUILD_ROOT_BASE)</SPO_BUILD>

        <TOOLS_DIR>$(SPO_BUILD)/public/$(Configuration)/Server/dll</TOOLS_DIR>

        <!-- TODO: finish consolidation of parallel build trees (eg, see other def'n of MainProps in Microsoft.SPOT.Build.Configuration.Settings) -->
        <MainProps>_FLAVOR=$(FLAVOR);_PLATFORMS=$(PLATFORMS);_PLATFORM=$(PLATFORM);_TARGETLOCATION=$(TARGETLOCATION);_MEMORY=$(MEMORY);_CLEAN_INDEPENDENT_ONLY=$(CLEAN_INDEPENDENT_ONLY);_BuildNumber=$(BuildNumber);_RevisionNumber=$(RevisionNumber);_Configuration=$(Configuration);_TinyCLR_Platform=$(TinyCLR_Platform);_SignBuild=$(SignBuild);_SolutionRoot=$(SolutionRoot);_MFSettingsFile=$(MFSettingsFile);PropagatedBy=System</MainProps>

        <CLRLIB>$(CLRROOT)/Tools/Libraries</CLRLIB>

        <SRC_DIR>$(CLRROOT)/$(Directory)</SRC_DIR>

        <!-- pedantic matching of letter case with old makefiles; makes it easier to use WinDiff to check things -->

        <OLD_FLAVOR Condition="'$(FLAVOR)'=='Release'">release</OLD_FLAVOR>
        <OLD_FLAVOR Condition="'$(FLAVOR)'=='Debug'">debug</OLD_FLAVOR>
        <OLD_FLAVOR Condition="'$(FLAVOR)'=='RTM'">RTM</OLD_FLAVOR>
        <OLD_FLAVOR Condition="'$(FLAVOR)'=='RTM' and '$(PLATFORM_FAMILY)'=='x86'">release</OLD_FLAVOR>
        <OLD_FLAVOR Condition="'$(FLAVOR)'=='Instrumented'">instrumented</OLD_FLAVOR>

    </PropertyGroup>

    <!-- set up the base DST_DIR path base on different PLATFORM_FAMILY at the corresponding setting files -->
    <Import Condition="'$(PLATFORM_FAMILY)'=='x86'"    Project="$(SPOCLIENT)/tools/targets/Microsoft.SPOT.System.x86.settings"    />
    <!-- IMPORT the COMPILER_TOOL specific settings file (if it exists).  COMPILER_TOOL is set by setenv.cmd -->
    <Import Condition="'$(PLATFORM_FAMILY)'!='x86' and EXISTS('$(SPOCLIENT)/tools/targets/Toppers.SPOT.System.$(COMPILER_TOOL).settings')"    Project="$(SPOCLIENT)/tools/targets/Toppers.SPOT.System.$(COMPILER_TOOL).settings"    />

    <PropertyGroup Condition="'$(PlatformIndependentBuild)'!='true'">
        <OBJ_DIR>$(DST_DIR)/$(OBJEXT)/$(Directory)</OBJ_DIR>
        <LIB_DIR>$(DST_DIR)/$(LIB_EXT)</LIB_DIR>
    </PropertyGroup>

    <PropertyGroup Condition="'$(PlatformIndependentBuild)'=='true'">
        <OBJ_DIR>$(PLATFORM_INDEPENDENT_DST_DIR)/$(OBJEXT)/$(Directory)</OBJ_DIR>
        <LIB_DIR>$(PLATFORM_INDEPENDENT_DST_DIR)/$(LIB_EXT)</LIB_DIR>
    </PropertyGroup>

    <PropertyGroup>
        <IntermediateOutputPath>$(OBJ_DIR)/</IntermediateOutputPath>
    </PropertyGroup>

    <PropertyGroup>
        <BIN_DIR Condition="'$(BIN_DIR)'==''"   >$(DST_DIR)/bin</BIN_DIR>
        <BLD_DIR>$(DST_DIR)</BLD_DIR>
        <PLATFORM_INDEPENDENT_OBJ_DIR           >$(PLATFORM_INDEPENDENT_DST_DIR)/$(OBJEXT)/$(Directory)</PLATFORM_INDEPENDENT_OBJ_DIR>
        <PLATFORM_INDEPENDENT_LIB_DIR           >$(PLATFORM_INDEPENDENT_DST_DIR)/$(LIB_EXT)</PLATFORM_INDEPENDENT_LIB_DIR>
    </PropertyGroup>

    <!-- at the common.mk-->
    <ItemGroup>
        <DirectIncludePaths Include="$(PLATFORM_INDEPENDENT_LIB_DIR)" />
        <IncludePaths Include="DeviceCode/Targets/$(TARGETCODEBASETYPE)/$(TARGETCODEBASE)/$(PLATFORM)" />
        <IncludePaths Include="Support/Include"/>
        <IncludePaths Include="DeviceCode/include"/>
        <IncludePaths Include="CLR/include"/>
        <IncludePaths Include="Crypto/inc"/>
    </ItemGroup>

    <Import Project="Microsoft.SPOT.System.HalIncludes.settings"/>
</Project>