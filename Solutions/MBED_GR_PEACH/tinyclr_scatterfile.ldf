MEMORY
{
    ER_TTB : ORIGIN = 0x20000000, LENGTH = 0x00004000
    LR_FLASH : ORIGIN = 0x18020000, LENGTH = 0x001df000
    LR_CONFIG : ORIGIN = 0x181f0000, LENGTH = 0x00001000
    HEAP : ORIGIN = 0x20400000, LENGTH = 0x5DFFFC + 1
    STACK : ORIGIN = 0x202f0000, LENGTH = 0x10FFFC + 1
    RELOC_RAM : ORIGIN = 0x20100000, LENGTH = 0x001a0000
}
ENTRY(EntryPoint)
SECTIONS
{
    ER_FLASH  :
    {
        * (i.EntryPoint)
        * (SectionForBootstrapOperations)
        KEEP(*(.boot_loader)) 
        PROVIDE(_sbrk = .);
        PROVIDE(_write = .);
        PROVIDE(_close = .);
        PROVIDE(_fstat = .);
        PROVIDE(_lseek = .);
        PROVIDE(_read = .);
        PROVIDE(_exit = .);
        PROVIDE(_getpid = .);
        PROVIDE(_kill = .);
        PROVIDE(abort = .);
        PROVIDE(__errno = .);
        PROVIDE(_read = .);
        PROVIDE(isatty = .);
        PROVIDE(_isatty = .);
        PROVIDE(__isnand = .);
        PROVIDE(__isinfd = .);
        PROVIDE(__signbit = .);
        PROVIDE(_isnand = .);
        PROVIDE(_isinfd = .);
        PROVIDE(_signbit = .);
        LONG(0xE12FFF1E); 
    }>LR_FLASH
    ER_RAM_RO  : ALIGN(0x10)
    {
        * (.text*)
        * (i.*)
        * (.rodata*)
        * (rodata)
        * (.constdata*)
        * (.conststring*)
        * (tinyclr_metadata)
        * (SectionForRvectors)
        * (SectionForFlashOperations)
        * (.text.RZA1_BS_Driver*)
    }>RELOC_RAM AT>LR_FLASH
    ER_RAM_RW  : ALIGN(0x10)
    {
        * (rwdata)
        * (.data*)
    }>RELOC_RAM AT>LR_FLASH
    .bss  : ALIGN(0x10)
    {
        * (.zidata*)
        * (.bss*)
        PROVIDE(__exidx_start = .); 
        PROVIDE(__exidx_end = .); 
    }>RELOC_RAM
    ER_LWIP_OS_RW  :
    {
        *sockets_hal_*_LWIP_os.lib(rwdata) 
        *lwip_1_4_1_os_CMSIS_RTOS.lib(rwdata) 
    }>RELOC_RAM
    ER_LWIP_OS_ZI  :
    {
        *sockets_hal_*_LWIP_os.lib(.bss) 
        *lwip_1_4_1_os_CMSIS_RTOS.lib(.bss) 
    }>RELOC_RAM
    /DISCARD/  :
    {
        * (.ARM.exidx*)
        * (.ARM.extab*)
    }
    ER_TTB  : ALIGN(0x10)
    {
    }>ER_TTB
    ER_HEAP_BEGIN 0x20400000 :
    {
        * (SectionForHeapBegin)
    }
    ER_HEAP_END 0x209dfffc :
    {
        * (SectionForHeapEnd)
    }
    ER_CUSTOM_HEAP_BEGIN 0x202a0000 :
    {
        * (SectionForCustomHeapBegin)
    }
    ER_CUSTOM_HEAP_END 0x202efffc :
    {
        * (SectionForCustomHeapEnd)
    }
    ER_STACK_BOTTOM 0x202f0000 :
    {
        * (SectionForStackBottom)
    }
    ER_STACK_TOP 0x203ffffc :
    {
        * (SectionForStackTop)
    }
    ER_CONFIG  :
    {
        * (SectionForConfig)
        KEEP(*(SectionForConfig1)) 
    }>LR_CONFIG
}
Load$$ER_FLASH$$Base = ADDR(ER_FLASH);
Image$$ER_FLASH$$Length = SIZEOF(ER_FLASH);
Image$$ER_RAM_RO$$Base = ADDR(ER_RAM_RO);
Image$$ER_RAM_RO$$Length = SIZEOF(ER_RAM_RO);
Load$$ER_RAM_RO$$Base = LOADADDR(ER_RAM_RO);
Image$$ER_RAM_RW$$Base = ADDR(ER_RAM_RW);
Image$$ER_RAM_RW$$Length = SIZEOF(ER_RAM_RW);
Load$$ER_RAM_RW$$Base = LOADADDR(ER_RAM_RW);
Image$$ER_RAM_RW$$ZI$$Base = ADDR(.bss);
Image$$ER_RAM_RW$$ZI$$Length = SIZEOF(.bss);
_use_no_semihosting_swi = 0;
Image$$VECTORS$$Base = 0x18004000;
Image$$RO_DATA$$Base = 0x18004000;
Image$$RW_DATA$$Base = 0x20600000;
Image$$ZI_DATA$$Base = 0x20100000;
Image$$TTB$$ZI$$Base = ADDR(ER_TTB);
Image$$VECTORS$$Limit = 0x18004FFF;
Image$$RO_DATA$$Limit = 0x181FFFFF;
Image$$RW_DATA$$Limit = 0x206FFFFF;
Image$$ZI_DATA$$Limit = 0x201FFFFF;
